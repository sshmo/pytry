{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to pytry","text":"<p>This site contains the project documentation for the <code>pytry</code> project.</p>"},{"location":"#table-of-contents","title":"Table Of Contents","text":"<p>The documentation consists of four separate parts:</p> <ol> <li>Tutorials</li> <li>How-To Guides</li> <li>Reference</li> <li>Explanation</li> </ol> <p>Quickly find what you're looking for depending on your use case by looking at the different pages.</p>"},{"location":"#project-overview","title":"Project Overview","text":"<p>pytry is a place to try python.</p>"},{"location":"explanation/","title":"Explanation","text":"<p>This part of the project documentation focuses on an understanding-oriented approach. You'll get a chance to read about the background of the project, as well as reasoning about how it was implemented.</p> <p>Note: Expand this section by considering the following points:</p> <ul> <li>Give context and background on your library</li> <li>Explain why you created it</li> <li>Provide multiple examples and approaches of how     to work with it</li> <li>Help the reader make connections</li> <li>Avoid writing instructions or technical descriptions     here</li> </ul>"},{"location":"how-to-guides/","title":"How-To Guides","text":"<p>This part of the project documentation focuses on a problem-oriented approach. You'll tackle common tasks that you might have, with the help of the code provided in this project.</p>"},{"location":"how-to-guides/#usage","title":"Usage","text":"<p>First download the code from pytry GitHub repository and install it:</p> <pre><code>    git clone git@github.com:sshmo/pytry.git\n    cd pytry\n    pip install .\n</code></pre> <p>Usage:</p> <pre><code>    from pytry.general.world_cup_dataframe import DFScoreBoard\n    score_board = DFScoreBoard(input)\n    score_board.main()\n    print(score_board)\n</code></pre>"},{"location":"reference/","title":"Reference","text":"<p>This part of the project documentation focuses on an information-oriented approach. Use it as a reference for the technical implementation of the <code>pytry</code> project code.</p> <p>pytry is a place to try python.</p> <p>General problems.</p> <p>base implementation.</p> <p>Favorite genres.</p> <pre><code>In a survey, moviegoers were asked to list 3 of their favorite genres.\nThey are given 6 different genres to choose from, including:\n\nHorror, Romance, Comedy, History, Adventure, Action.\n</code></pre> Write a program that <p>takes the number of people, then takes the name of each person with their favorite genres and prints the name of each genre and the number of people interested in that genre in the order of the most interested in the output. (If the level of interest in different genres is the same, print in the order of the English alphabet in the output.) If no genre is selected, consider its value as zero and print the name and number 0 in the output.</p> <p>Input: 4 hossein Horror Romance Comedy mohsen Horror Action Comedy mina Adventure Action History sajjad Romance History Action</p> <p>Output: Action : 3 Comedy : 2 History : 2 Horror : 2 Romance : 2 Adventure : 1</p> <p>Index words.</p> <pre><code>Write a program that:\n\n    prints index words (words that start with capital letters)\n    along with the word number (the most common word) from a text.\n    If a word with this feature is not found in the text, it will print None in the output.\n    You should not consider the words at the beginning of the sentence as index words.\n    (number the words starting from one)\n\n    Numbers are not counted except index words.\n    The only sign used in the sentence is the comma.\n    Be sure to remove the dot or comma at the end of the word.\n\n    Input:\n    The Persian League is the largest sport event dedicated to the deprived areas of Iran.\n    The Persian League promotes peace and friendship.\n    This video was captured by one of our heroes who wishes peace.\n\n    Output:\n    2:Persian\n    3:League\n    15:Iran\n    17:Persian\n    18:League\n</code></pre> <p>Computer Olympiad list.</p> <pre><code>Ahmed is sending the final list of the names of those accepted\nto the Computer Olympiad to the results review committee\nso that the committee can print the entry cards for the final competitions,\nbut because a specific format was not defined for registering the names during the test,\nthe participants did not used standard names, besides,\nthe language with which they participated in the competition is written in the continuation of each name,\nand the gender of the people is also specified at the beginning of each name.\nThe standard form of names is that the first letter of the name is uppercase\nand the rest of the letters of the name are lowercase.\n\nWrite a program that reads the number, name, gender, and language of the accepted candidates\nfrom the input and separates the names based on their gender,\nstandardizes them, and writes the language in front of each name with\nwhich they participated in the competition.\n(In the output, the female gender should be printed first and then the male gender.\nThe names of each gender should be printed in the order of the English alphabet.)\n\nInput:\n4\nm.hosSein.python\nf.miNa.C\nm.aHMad.C++\nf.Sara.java\n\nOutput:\nf Mina C\nf Sara java\nm Ahmad C++\nm Hossein python\n</code></pre> <p>The max number that has the highest number of prime factors.</p> <pre><code>Write a program that:\n\n    reads 10 numbers from the input.\n    prints the number that has the highest number of prime factors\n    along with the number of its prime factors in the output.\n    If there are several numbers in this state, print the largest one.\n\n    Input:\n    123\n    43\n    54\n    12\n    76\n    84\n    98\n    678\n    543\n    231\n\n    Output:\n    678 3\n</code></pre> <p>World Cup score board base implementation.</p> <pre><code>Iran, Portugal, Spain and Morocco are present in Group B of the World Cup.\nWrite a program that, upon receiving the results of the games,\nwill print the team name, the number of wins and losses,\nand the difference in goals and points respectively in one line.\nEach team should be printed in order of points in one line.\n(If the points are equal, the number of wins will be considered.\nIf both the number of wins and the points are equal,\nthey will be printed in alphabetical order.)\n\nNote: The team gets zero points in case of loss,\none point in case of draw and three points in case of win.\nGoal difference is the difference between goals scored and goals conceded by a team.\n\nRead the results of the games in the following order:\n(in the sample entry, the left number corresponds to the right team.)\n\nInput:\nIran - Spain\nIran - Portugal\nIran - Morocco\nSpain - Portugal\nSpain - Morocco\nPortugal - Morocco\n2-2\n2-1\n1-2\n2-2\n3-1\n2-1\n\nOutput:\nSpain  wins:1 , loses:0 , draws:2 , goal difference:2 , points:5\nIran  wins:1 , loses:1 , draws:1 , goal difference:0 , points:4\nPortugal  wins:1 , loses:1 , draws:1 , goal difference:0 , points:4\nMorocco  wins:1 , loses:2 , draws:0 , goal difference:-2 , points:3\n</code></pre> <p>World Cup score board dataframe implementation.</p> <p>World Cup score board dictionary implementation.</p>"},{"location":"reference/#pytry.general.base.Base","title":"<code>Base</code>","text":"<p>         Bases: <code>ABC</code></p> <p>Base.</p> <p>Attributes:</p> Name Type Description <code>input_count</code> <code>int</code> <p>int : number of key row data.</p> <code>keys</code> <code>Set[str]</code> <p>Set[str] set of keys for which we calculate and represent statistics.</p> <code>key_data</code> <code>Any</code> <p>data structure for saving key data.</p> <code>key_stats</code> <p>Any : data structure for calculating key statistics.</p> Source code in <code>pytry/general/base.py</code> <pre><code>class Base(ABC):\n\"\"\"\n    Base.\n\n    Attributes:\n        input_count: int : number of key row data.\n        keys: Set[str] set of keys for which we calculate and represent statistics.\n        key_data: data structure for saving key data.\n        key_stats : Any : data structure for calculating key statistics.\n    \"\"\"\n\n    @abstractmethod\n    def __init__(self, input_func: Any) -&gt; None:\n\"\"\"\n        Given input_func; Inits Base attributes.\n\n        Args:\n            input_func: A function for generating input data.\n        \"\"\"\n        self.input_count: int\n        self.keys: Set[str]\n        self.key_stats: Any\n        self.key_data: Any\n\n    @staticmethod\n    @abstractmethod\n    def _get_key_data(input_func: Any, input_count: int):\n\"\"\"get_key_data.\"\"\"\n\n    @staticmethod\n    def get_input_count(input_func: Any) -&gt; int:\n\"\"\"get_input_count.\"\"\"\n        while True:\n            num: str = input_func()\n            input_count = int(num) if num.isdigit() else None\n            if input_count:\n                break\n            print(\"Not a number!\")\n        return input_count\n\n    def __repr__(self) -&gt; str:  # pragma: no cover\n\"\"\"Given key_stats; create key_stats representation for all keys.\"\"\"\n        return \"\"\n\n    @abstractmethod\n    def update_stats(self, key_stats, key):\n\"\"\"\n        Update stats of a key for a single row.\n\n        Returns:\n            updated stats for each key\n        \"\"\"\n\n    @abstractmethod\n    def main(self) -&gt; None:\n\"\"\"Given key_data from the input; calculates key_stats.\"\"\"\n</code></pre>"},{"location":"reference/#pytry.general.base.Base.__init__","title":"<code>__init__(input_func)</code>  <code>abstractmethod</code>","text":"<p>Given input_func; Inits Base attributes.</p> <p>Parameters:</p> Name Type Description Default <code>input_func</code> <code>Any</code> <p>A function for generating input data.</p> required Source code in <code>pytry/general/base.py</code> <pre><code>@abstractmethod\ndef __init__(self, input_func: Any) -&gt; None:\n\"\"\"\n    Given input_func; Inits Base attributes.\n\n    Args:\n        input_func: A function for generating input data.\n    \"\"\"\n    self.input_count: int\n    self.keys: Set[str]\n    self.key_stats: Any\n    self.key_data: Any\n</code></pre>"},{"location":"reference/#pytry.general.base.Base.__repr__","title":"<code>__repr__()</code>","text":"<p>Given key_stats; create key_stats representation for all keys.</p> Source code in <code>pytry/general/base.py</code> <pre><code>def __repr__(self) -&gt; str:  # pragma: no cover\n\"\"\"Given key_stats; create key_stats representation for all keys.\"\"\"\n    return \"\"\n</code></pre>"},{"location":"reference/#pytry.general.base.Base.get_input_count","title":"<code>get_input_count(input_func)</code>  <code>staticmethod</code>","text":"<p>get_input_count.</p> Source code in <code>pytry/general/base.py</code> <pre><code>@staticmethod\ndef get_input_count(input_func: Any) -&gt; int:\n\"\"\"get_input_count.\"\"\"\n    while True:\n        num: str = input_func()\n        input_count = int(num) if num.isdigit() else None\n        if input_count:\n            break\n        print(\"Not a number!\")\n    return input_count\n</code></pre>"},{"location":"reference/#pytry.general.base.Base.main","title":"<code>main()</code>  <code>abstractmethod</code>","text":"<p>Given key_data from the input; calculates key_stats.</p> Source code in <code>pytry/general/base.py</code> <pre><code>@abstractmethod\ndef main(self) -&gt; None:\n\"\"\"Given key_data from the input; calculates key_stats.\"\"\"\n</code></pre>"},{"location":"reference/#pytry.general.base.Base.update_stats","title":"<code>update_stats(key_stats, key)</code>  <code>abstractmethod</code>","text":"<p>Update stats of a key for a single row.</p> <p>Returns:</p> Type Description <p>updated stats for each key</p> Source code in <code>pytry/general/base.py</code> <pre><code>@abstractmethod\ndef update_stats(self, key_stats, key):\n\"\"\"\n    Update stats of a key for a single row.\n\n    Returns:\n        updated stats for each key\n    \"\"\"\n</code></pre>"},{"location":"reference/#pytry.general.favorite_genres.FavoriteGeneres","title":"<code>FavoriteGeneres</code>","text":"<p>         Bases: <code>Base</code></p> <p>FavoriteGeneres.</p> <p>Attributes:</p> Name Type Description <code>input_count</code> <p>int : number of genere row data.</p> <code>keys</code> <p>Set[str] set of generes for which we calculate and represent statistics.</p> <code>key_data</code> <p>data structure for saving genere data.</p> <code>key_stats</code> <p>Any : data structure for saving genere statistics.</p> Source code in <code>pytry/general/favorite_genres.py</code> <pre><code>class FavoriteGeneres(Base):\n\"\"\"\n    FavoriteGeneres.\n\n    Attributes:\n        input_count: int : number of genere row data.\n        keys: Set[str] set of generes for which we calculate and represent statistics.\n        key_data: data structure for saving genere data.\n        key_stats : Any : data structure for saving genere statistics.\n    \"\"\"\n\n    def __init__(self, input_func: Any) -&gt; None:\n\"\"\"\n        Given the number of people; Inits FavoriteGeneres attributes.\n\n        Args:\n            input_func: a function for generating input numbers.\n        \"\"\"\n        super().__init__(input_func)\n        self.keys = set()\n        self.input_count = self.get_input_count(input_func)\n        self.key_data = self._get_key_data(input_func, self.input_count)\n        for _, value in self.key_data.items():\n            self.keys.update(set(value))\n\n        self.key_stats = {}\n        for genere in self.keys:\n            self.key_stats[genere] = {\n                \"genere\": genere,\n                \"count\": 0,\n            }\n\n    @staticmethod\n    def get_input_count(input_func: Any) -&gt; int:\n\"\"\"get_input_count.\"\"\"\n        return Base.get_input_count(input_func)\n\n    @staticmethod\n    def _get_key_data(input_func: Any, input_count: int) -&gt; Dict[str, List[str]]:\n        key_data = {}\n        while True:\n            data: str = input_func()\n            datal_list = data.split(\" \")\n            name = datal_list[0]\n            key_data[name] = datal_list[1:]\n            if len(key_data) == input_count:\n                break\n        return key_data\n\n    @staticmethod\n    def fill_board(key_repr, key, row):\n\"\"\"Fill genere stats data row by row.\"\"\"\n        key_repr += f\"{key} : {row['count']}\\n\"\n        return key_repr\n\n    def __repr__(self) -&gt; str:\n\"\"\"Given genere_board; create genere stat representation for all generes.\"\"\"\n        genere_board_data: Dict = self.key_stats\n        soretd_generes = sorted(\n            genere_board_data, key=lambda x: (-genere_board_data[x][\"count\"], genere_board_data[x][\"genere\"])\n        )\n        result = \"\"\n        for genere in soretd_generes:\n            row = genere_board_data[genere]\n            result = self.fill_board(result, genere, row)\n\n        return result\n\n    def update_stats(self, key_stats, key):\n\"\"\"Update stats of a genere for a single row.\"\"\"\n        key_stats[key][\"count\"] += 1\n        return key_stats\n\n    def main(self) -&gt; None:\n\"\"\"Given genere data from the input; calculate genere stats for all generes.\"\"\"\n        for genere in self.keys:\n            for _, list_value in self.key_data.items():\n                for value in list_value:\n                    if genere == value:\n                        self.key_stats = self.update_stats(self.key_stats, genere)\n</code></pre>"},{"location":"reference/#pytry.general.favorite_genres.FavoriteGeneres.__init__","title":"<code>__init__(input_func)</code>","text":"<p>Given the number of people; Inits FavoriteGeneres attributes.</p> <p>Parameters:</p> Name Type Description Default <code>input_func</code> <code>Any</code> <p>a function for generating input numbers.</p> required Source code in <code>pytry/general/favorite_genres.py</code> <pre><code>def __init__(self, input_func: Any) -&gt; None:\n\"\"\"\n    Given the number of people; Inits FavoriteGeneres attributes.\n\n    Args:\n        input_func: a function for generating input numbers.\n    \"\"\"\n    super().__init__(input_func)\n    self.keys = set()\n    self.input_count = self.get_input_count(input_func)\n    self.key_data = self._get_key_data(input_func, self.input_count)\n    for _, value in self.key_data.items():\n        self.keys.update(set(value))\n\n    self.key_stats = {}\n    for genere in self.keys:\n        self.key_stats[genere] = {\n            \"genere\": genere,\n            \"count\": 0,\n        }\n</code></pre>"},{"location":"reference/#pytry.general.favorite_genres.FavoriteGeneres.__repr__","title":"<code>__repr__()</code>","text":"<p>Given genere_board; create genere stat representation for all generes.</p> Source code in <code>pytry/general/favorite_genres.py</code> <pre><code>def __repr__(self) -&gt; str:\n\"\"\"Given genere_board; create genere stat representation for all generes.\"\"\"\n    genere_board_data: Dict = self.key_stats\n    soretd_generes = sorted(\n        genere_board_data, key=lambda x: (-genere_board_data[x][\"count\"], genere_board_data[x][\"genere\"])\n    )\n    result = \"\"\n    for genere in soretd_generes:\n        row = genere_board_data[genere]\n        result = self.fill_board(result, genere, row)\n\n    return result\n</code></pre>"},{"location":"reference/#pytry.general.favorite_genres.FavoriteGeneres.fill_board","title":"<code>fill_board(key_repr, key, row)</code>  <code>staticmethod</code>","text":"<p>Fill genere stats data row by row.</p> Source code in <code>pytry/general/favorite_genres.py</code> <pre><code>@staticmethod\ndef fill_board(key_repr, key, row):\n\"\"\"Fill genere stats data row by row.\"\"\"\n    key_repr += f\"{key} : {row['count']}\\n\"\n    return key_repr\n</code></pre>"},{"location":"reference/#pytry.general.favorite_genres.FavoriteGeneres.get_input_count","title":"<code>get_input_count(input_func)</code>  <code>staticmethod</code>","text":"<p>get_input_count.</p> Source code in <code>pytry/general/favorite_genres.py</code> <pre><code>@staticmethod\ndef get_input_count(input_func: Any) -&gt; int:\n\"\"\"get_input_count.\"\"\"\n    return Base.get_input_count(input_func)\n</code></pre>"},{"location":"reference/#pytry.general.favorite_genres.FavoriteGeneres.main","title":"<code>main()</code>","text":"<p>Given genere data from the input; calculate genere stats for all generes.</p> Source code in <code>pytry/general/favorite_genres.py</code> <pre><code>def main(self) -&gt; None:\n\"\"\"Given genere data from the input; calculate genere stats for all generes.\"\"\"\n    for genere in self.keys:\n        for _, list_value in self.key_data.items():\n            for value in list_value:\n                if genere == value:\n                    self.key_stats = self.update_stats(self.key_stats, genere)\n</code></pre>"},{"location":"reference/#pytry.general.favorite_genres.FavoriteGeneres.update_stats","title":"<code>update_stats(key_stats, key)</code>","text":"<p>Update stats of a genere for a single row.</p> Source code in <code>pytry/general/favorite_genres.py</code> <pre><code>def update_stats(self, key_stats, key):\n\"\"\"Update stats of a genere for a single row.\"\"\"\n    key_stats[key][\"count\"] += 1\n    return key_stats\n</code></pre>"},{"location":"reference/#pytry.general.index_words.IndexWords","title":"<code>IndexWords</code>","text":"<p>         Bases: <code>Base</code></p> <p>IndexWords.</p> <p>Attributes:</p> Name Type Description <code>key_data</code> <code>str</code> <p>input text corpus.</p> <code>key_stats</code> <code>str</code> <p>data structure for saving index word position in the text corpus.</p> Source code in <code>pytry/general/index_words.py</code> <pre><code>class IndexWords(Base):\n\"\"\"\n    IndexWords.\n\n    Attributes:\n        key_data: input text corpus.\n        key_stats:  data structure for saving index word position in the text corpus.\n    \"\"\"\n\n    def __init__(self, input_func: Any) -&gt; None:\n\"\"\"\n        Given the number of people; Inits IndexWords attributes.\n\n        Args:\n            input_func: a function for generating input numbers.\n        \"\"\"\n        super().__init__(input_func)\n        self.key_data: str = input_func()\n\n    @staticmethod\n    def _get_key_data(input_func: Any, input_count: int):\n\"\"\"Not Implemented.\"\"\"\n\n    def update_stats(self, key_stats, key):\n\"\"\"Not Implemented.\"\"\"\n\n    def __repr__(self) -&gt; str:\n\"\"\"Given key_stats; create index word representation.\"\"\"\n        stats = self.key_stats\n        word_repr = \"\"\n        sorted_rsult = sorted(stats)\n        for ind in sorted_rsult:\n            word_repr += f\"{ind}:{stats[ind].replace('.', '')}\\n\"\n        return word_repr\n\n    def main(self) -&gt; None:\n\"\"\"Given key_data; calculates index word stats.\"\"\"\n        words = self.key_data.split(\" \")\n        self.key_stats: Dict[int, str] = {\n            i + 1: word\n            for i, word in enumerate(words)\n            if i != 0 and word == word.capitalize() and not (words[i - 1].endswith(\".\"))\n        }\n</code></pre>"},{"location":"reference/#pytry.general.index_words.IndexWords.__init__","title":"<code>__init__(input_func)</code>","text":"<p>Given the number of people; Inits IndexWords attributes.</p> <p>Parameters:</p> Name Type Description Default <code>input_func</code> <code>Any</code> <p>a function for generating input numbers.</p> required Source code in <code>pytry/general/index_words.py</code> <pre><code>def __init__(self, input_func: Any) -&gt; None:\n\"\"\"\n    Given the number of people; Inits IndexWords attributes.\n\n    Args:\n        input_func: a function for generating input numbers.\n    \"\"\"\n    super().__init__(input_func)\n    self.key_data: str = input_func()\n</code></pre>"},{"location":"reference/#pytry.general.index_words.IndexWords.__repr__","title":"<code>__repr__()</code>","text":"<p>Given key_stats; create index word representation.</p> Source code in <code>pytry/general/index_words.py</code> <pre><code>def __repr__(self) -&gt; str:\n\"\"\"Given key_stats; create index word representation.\"\"\"\n    stats = self.key_stats\n    word_repr = \"\"\n    sorted_rsult = sorted(stats)\n    for ind in sorted_rsult:\n        word_repr += f\"{ind}:{stats[ind].replace('.', '')}\\n\"\n    return word_repr\n</code></pre>"},{"location":"reference/#pytry.general.index_words.IndexWords.main","title":"<code>main()</code>","text":"<p>Given key_data; calculates index word stats.</p> Source code in <code>pytry/general/index_words.py</code> <pre><code>def main(self) -&gt; None:\n\"\"\"Given key_data; calculates index word stats.\"\"\"\n    words = self.key_data.split(\" \")\n    self.key_stats: Dict[int, str] = {\n        i + 1: word\n        for i, word in enumerate(words)\n        if i != 0 and word == word.capitalize() and not (words[i - 1].endswith(\".\"))\n    }\n</code></pre>"},{"location":"reference/#pytry.general.index_words.IndexWords.update_stats","title":"<code>update_stats(key_stats, key)</code>","text":"<p>Not Implemented.</p> Source code in <code>pytry/general/index_words.py</code> <pre><code>def update_stats(self, key_stats, key):\n\"\"\"Not Implemented.\"\"\"\n</code></pre>"},{"location":"reference/#pytry.general.olympiad.Olympiad","title":"<code>Olympiad</code>","text":"<p>         Bases: <code>Base</code></p> <p>Olympiad.</p> <p>Attributes:</p> Name Type Description <code>input_count</code> <p>int : number of people.</p> <code>key_data</code> <p>data structure for saving people data.</p> Source code in <code>pytry/general/olympiad.py</code> <pre><code>class Olympiad(Base):\n\"\"\"\n    Olympiad.\n\n    Attributes:\n        input_count: int : number of people.\n        key_data: data structure for saving people data.\n    \"\"\"\n\n    def __init__(self, input_func: Any) -&gt; None:\n\"\"\"\n        Given the number of people; Inits Olympiad attributes.\n\n        Args:\n            input_func: a function for generating input numbers.\n        \"\"\"\n        super().__init__(input_func)\n        self.keys = set()\n        self.input_count = self.get_input_count(input_func)\n        self.key_data = self._get_key_data(input_func, self.input_count)\n\n    @staticmethod\n    def _get_key_data(input_func: Any, input_count: int):\n        key_data = {}\n        while True:\n            data: str = input_func()\n            datal_list: List[str] = data.split(\".\")\n            program: str = datal_list.pop()\n            name: str = datal_list.pop().lower().capitalize()\n            gender: str = datal_list.pop()\n\n            key_data[name] = {\"name\": name, \"program\": program, \"gender\": gender}\n            if len(key_data) == input_count:\n                break\n        return key_data\n\n    @staticmethod\n    def get_input_count(input_func: Any) -&gt; int:\n\"\"\"get_input_count.\"\"\"\n        return Base.get_input_count(input_func)\n\n    def __repr__(self) -&gt; str:\n\"\"\"Given key_data; create standardized olympiad representation for all persons.\"\"\"\n        data_repr = \"\"\n        data = self.key_data\n        soretd_names = sorted(data, key=lambda x: (data[x][\"gender\"], data[x][\"name\"]))\n        for name in soretd_names:\n            data_repr += f'{data[name][\"gender\"]} {data[name][\"name\"]} {data[name][\"program\"]}\\n'\n\n        return data_repr\n\n    def update_stats(self, key_stats, key):\n\"\"\"Not Implemented.\"\"\"\n\n    def main(self) -&gt; None:\n\"\"\"Not Implemented.\"\"\"\n</code></pre>"},{"location":"reference/#pytry.general.olympiad.Olympiad.__init__","title":"<code>__init__(input_func)</code>","text":"<p>Given the number of people; Inits Olympiad attributes.</p> <p>Parameters:</p> Name Type Description Default <code>input_func</code> <code>Any</code> <p>a function for generating input numbers.</p> required Source code in <code>pytry/general/olympiad.py</code> <pre><code>def __init__(self, input_func: Any) -&gt; None:\n\"\"\"\n    Given the number of people; Inits Olympiad attributes.\n\n    Args:\n        input_func: a function for generating input numbers.\n    \"\"\"\n    super().__init__(input_func)\n    self.keys = set()\n    self.input_count = self.get_input_count(input_func)\n    self.key_data = self._get_key_data(input_func, self.input_count)\n</code></pre>"},{"location":"reference/#pytry.general.olympiad.Olympiad.__repr__","title":"<code>__repr__()</code>","text":"<p>Given key_data; create standardized olympiad representation for all persons.</p> Source code in <code>pytry/general/olympiad.py</code> <pre><code>def __repr__(self) -&gt; str:\n\"\"\"Given key_data; create standardized olympiad representation for all persons.\"\"\"\n    data_repr = \"\"\n    data = self.key_data\n    soretd_names = sorted(data, key=lambda x: (data[x][\"gender\"], data[x][\"name\"]))\n    for name in soretd_names:\n        data_repr += f'{data[name][\"gender\"]} {data[name][\"name\"]} {data[name][\"program\"]}\\n'\n\n    return data_repr\n</code></pre>"},{"location":"reference/#pytry.general.olympiad.Olympiad.get_input_count","title":"<code>get_input_count(input_func)</code>  <code>staticmethod</code>","text":"<p>get_input_count.</p> Source code in <code>pytry/general/olympiad.py</code> <pre><code>@staticmethod\ndef get_input_count(input_func: Any) -&gt; int:\n\"\"\"get_input_count.\"\"\"\n    return Base.get_input_count(input_func)\n</code></pre>"},{"location":"reference/#pytry.general.olympiad.Olympiad.main","title":"<code>main()</code>","text":"<p>Not Implemented.</p> Source code in <code>pytry/general/olympiad.py</code> <pre><code>def main(self) -&gt; None:\n\"\"\"Not Implemented.\"\"\"\n</code></pre>"},{"location":"reference/#pytry.general.olympiad.Olympiad.update_stats","title":"<code>update_stats(key_stats, key)</code>","text":"<p>Not Implemented.</p> Source code in <code>pytry/general/olympiad.py</code> <pre><code>def update_stats(self, key_stats, key):\n\"\"\"Not Implemented.\"\"\"\n</code></pre>"},{"location":"reference/#pytry.general.max_prime.MaxPrime","title":"<code>MaxPrime</code>","text":"<p>         Bases: <code>Base</code></p> <p>MaxPrime.</p> <p>Attributes:</p> Name Type Description <code>input_count</code> <p>int : number of input integers.</p> <code>key_data</code> <p>a list of integers.</p> <code>key_stats</code> <p>Dict : key value count of prime factors for each number.</p> Source code in <code>pytry/general/max_prime.py</code> <pre><code>class MaxPrime(Base):\n\"\"\"\n    MaxPrime.\n\n    Attributes:\n        input_count: int : number of input integers.\n        key_data: a list of integers.\n        key_stats : Dict : key value count of prime factors for each number.\n    \"\"\"\n\n    def __init__(self, input_func: Any) -&gt; None:\n\"\"\"\n        Given random number of input strings; Inits MaxPrime attributes.\n\n        Args:\n            input_func: a function for generating input numbers.\n        \"\"\"\n        super().__init__(input_func)\n        self.input_count = 10\n\n        self.key_data = self._get_key_data(input_func, self.input_count)\n        self.key_stats: dict = {}\n        for key in self.key_data:\n            self.key_stats[key] = 0\n\n    @staticmethod\n    def _get_key_data(input_func: Any, input_count: int) -&gt; List[int]:\n        key_data = []\n        while True:\n            num_input: str = input_func()\n            num: Optional[int] = int(num_input) if num_input.isdigit() else None\n            if num:\n                key_data.append(num)\n            else:\n                print(\"Not a number!\")\n            if len(key_data) == input_count:\n                break\n        return key_data\n\n    def __repr__(self) -&gt; str:\n\"\"\"Return max count of prime factors for the max number.\"\"\"\n        max_value = max(self.key_stats.values())\n        keys = [key for key, value in self.key_stats.items() if value == max_value]\n        max_number = max(keys)\n        return f\"{max_number} {max_value}\"\n\n    @staticmethod\n    def is_prime(num: int):\n\"\"\"\n        Check if number is prime.\n\n        Args:\n            num: an integer.\n        Returns:\n            true if prime else false.\n        \"\"\"\n        return all(num % x != 0 for x in range(2, int(num**0.5) + 1)) if num &gt; 1 else False\n\n    def get_prime_list(self, nums: List[int]) -&gt; List[int]:\n\"\"\"\n        Given numbers list, returns all prime numbers lower than max number.\n\n        Args:\n            nums: all input numbers.\n        Returns:\n            all prime numbers lower than max number.\n        \"\"\"\n        max_num = max(nums) + 1\n        primes = []\n        for i in range(2, max_num):\n            if self.is_prime(i):\n                primes.append(i)\n        return primes\n\n    def update_stats(self, key_stats, key) -&gt; Dict[int, int]:\n\"\"\"Update count of of prime factors for a number.\"\"\"\n        key_stats[key] += 1\n        return key_stats\n\n    def main(self) -&gt; None:\n\"\"\"Given numbers; calculate count of prime factors for all numbers.\"\"\"\n        numbers = self.key_data\n        prime_list = self.get_prime_list(numbers)\n        for number in numbers:\n            for prime in prime_list:\n                if number % prime == 0:\n                    self.key_stats = self.update_stats(self.key_stats, number)\n</code></pre>"},{"location":"reference/#pytry.general.max_prime.MaxPrime.__init__","title":"<code>__init__(input_func)</code>","text":"<p>Given random number of input strings; Inits MaxPrime attributes.</p> <p>Parameters:</p> Name Type Description Default <code>input_func</code> <code>Any</code> <p>a function for generating input numbers.</p> required Source code in <code>pytry/general/max_prime.py</code> <pre><code>def __init__(self, input_func: Any) -&gt; None:\n\"\"\"\n    Given random number of input strings; Inits MaxPrime attributes.\n\n    Args:\n        input_func: a function for generating input numbers.\n    \"\"\"\n    super().__init__(input_func)\n    self.input_count = 10\n\n    self.key_data = self._get_key_data(input_func, self.input_count)\n    self.key_stats: dict = {}\n    for key in self.key_data:\n        self.key_stats[key] = 0\n</code></pre>"},{"location":"reference/#pytry.general.max_prime.MaxPrime.__repr__","title":"<code>__repr__()</code>","text":"<p>Return max count of prime factors for the max number.</p> Source code in <code>pytry/general/max_prime.py</code> <pre><code>def __repr__(self) -&gt; str:\n\"\"\"Return max count of prime factors for the max number.\"\"\"\n    max_value = max(self.key_stats.values())\n    keys = [key for key, value in self.key_stats.items() if value == max_value]\n    max_number = max(keys)\n    return f\"{max_number} {max_value}\"\n</code></pre>"},{"location":"reference/#pytry.general.max_prime.MaxPrime.get_prime_list","title":"<code>get_prime_list(nums)</code>","text":"<p>Given numbers list, returns all prime numbers lower than max number.</p> <p>Parameters:</p> Name Type Description Default <code>nums</code> <code>List[int]</code> <p>all input numbers.</p> required <p>Returns:</p> Type Description <code>List[int]</code> <p>all prime numbers lower than max number.</p> Source code in <code>pytry/general/max_prime.py</code> <pre><code>def get_prime_list(self, nums: List[int]) -&gt; List[int]:\n\"\"\"\n    Given numbers list, returns all prime numbers lower than max number.\n\n    Args:\n        nums: all input numbers.\n    Returns:\n        all prime numbers lower than max number.\n    \"\"\"\n    max_num = max(nums) + 1\n    primes = []\n    for i in range(2, max_num):\n        if self.is_prime(i):\n            primes.append(i)\n    return primes\n</code></pre>"},{"location":"reference/#pytry.general.max_prime.MaxPrime.is_prime","title":"<code>is_prime(num)</code>  <code>staticmethod</code>","text":"<p>Check if number is prime.</p> <p>Parameters:</p> Name Type Description Default <code>num</code> <code>int</code> <p>an integer.</p> required <p>Returns:</p> Type Description <p>true if prime else false.</p> Source code in <code>pytry/general/max_prime.py</code> <pre><code>@staticmethod\ndef is_prime(num: int):\n\"\"\"\n    Check if number is prime.\n\n    Args:\n        num: an integer.\n    Returns:\n        true if prime else false.\n    \"\"\"\n    return all(num % x != 0 for x in range(2, int(num**0.5) + 1)) if num &gt; 1 else False\n</code></pre>"},{"location":"reference/#pytry.general.max_prime.MaxPrime.main","title":"<code>main()</code>","text":"<p>Given numbers; calculate count of prime factors for all numbers.</p> Source code in <code>pytry/general/max_prime.py</code> <pre><code>def main(self) -&gt; None:\n\"\"\"Given numbers; calculate count of prime factors for all numbers.\"\"\"\n    numbers = self.key_data\n    prime_list = self.get_prime_list(numbers)\n    for number in numbers:\n        for prime in prime_list:\n            if number % prime == 0:\n                self.key_stats = self.update_stats(self.key_stats, number)\n</code></pre>"},{"location":"reference/#pytry.general.max_prime.MaxPrime.update_stats","title":"<code>update_stats(key_stats, key)</code>","text":"<p>Update count of of prime factors for a number.</p> Source code in <code>pytry/general/max_prime.py</code> <pre><code>def update_stats(self, key_stats, key) -&gt; Dict[int, int]:\n\"\"\"Update count of of prime factors for a number.\"\"\"\n    key_stats[key] += 1\n    return key_stats\n</code></pre>"},{"location":"reference/#pytry.general.world_cup_base.BaseScoreBoard","title":"<code>BaseScoreBoard</code>","text":"<p>         Bases: <code>Base</code></p> <p>BaseScoreBoard.</p> <p>Attributes:</p> Name Type Description <code>games</code> <p>List of games. like [{\"A\": \"1\", \"B\": \"1\"}, {\"A\": \"1\", \"C\": \"3\"}].</p> <code>keys</code> <p>Set of countries. like {\"A\", \"B\", \"C\"}.</p> <code>key_stats</code> <code>Any</code> <p>data structure for saving wins, loses, draws, goal_difference, points, count for each country.</p> Source code in <code>pytry/general/world_cup_base.py</code> <pre><code>class BaseScoreBoard(Base):\n\"\"\"\n    BaseScoreBoard.\n\n    Attributes:\n        games: List of games. like [{\"A\": \"1\", \"B\": \"1\"}, {\"A\": \"1\", \"C\": \"3\"}].\n        keys: Set of countries. like {\"A\", \"B\", \"C\"}.\n        key_stats: data structure for saving wins, loses, draws, goal_difference, points, count for each country.\n    \"\"\"\n\n    @abstractmethod\n    def __init__(self, input_func: Any) -&gt; None:\n\"\"\"\n        Given input_func; Inits games, BaseScoreBoard attributes.\n\n        Args:\n            input_func: A function for generating input data.\n        \"\"\"\n        super().__init__(input_func)\n        games = []\n        countries = set()\n        self.input_count = 6\n\n        country_pairs = self._get_country_pairs(input_func, self.input_count)\n        scores = self._get_key_data(input_func, self.input_count)\n\n        for i in range(0, self.input_count):\n            games.append({country_pairs[i][0]: scores[i][0], country_pairs[i][1]: scores[i][1]})\n            countries.add(country_pairs[i][0])\n            countries.add(country_pairs[i][1])\n\n        self.games, self.keys = games, countries\n        self.key_stats: Any\n\n    @staticmethod\n    def _get_country_pairs(input_func: Any, input_count: int) -&gt; List[List[str]]:\n        country_pairs = []\n        while True:\n            raw_country_pair: str = input_func()\n            if re.match(r\"\\w+\\s-\\s\\w+\", raw_country_pair):\n                country_pair = raw_country_pair.split(\" - \")\n                country_pairs.append(country_pair)\n            if len(country_pairs) == input_count:\n                break\n        return country_pairs\n\n    @staticmethod\n    def _get_key_data(input_func: Any, input_count: int):\n        scores = []\n        while True:\n            raw_scores: str = input_func()\n            if re.match(r\"\\d+-\\d+\", raw_scores):\n                scores.append(raw_scores.split(\"-\"))\n            if len(scores) == input_count:\n                break\n        return scores\n\n    @staticmethod\n    @abstractmethod\n    def get_row(key_stats, key: str):  # pragma: no cover\n\"\"\"Get row.\"\"\"\n        return {}\n\n    @staticmethod\n    def get_other_side(game: Dict[str, str], country: str) -&gt; str:\n\"\"\"\n        Get other side in a game.\n\n        Args:\n            game: a dictionary like {\"A\": \"1\", \"B\": \"1\"}.\n            country: the country which the scores are calculated for like \"A\".\n\n        Returns:\n            the the other country like \"B\"\n        \"\"\"\n        game_sides: List = list(game.keys())\n        game_sides.remove(country)\n        other_side = game_sides[0]\n        return other_side\n\n    @staticmethod\n    def _update_game_stats(row, goal_difference):\n        if goal_difference == 0:\n            row[\"draws\"] += 1\n            row[\"points\"] += 1\n        elif goal_difference &gt; 0:\n            row[\"wins\"] += 1\n            row[\"points\"] += 3\n        elif goal_difference &lt; 0:\n            row[\"loses\"] += 1\n        return row\n\n    def update_game(self, row, key, game, other_side):\n\"\"\"\n        Update stats of a country for a single game.\n\n        Args:\n            row: data structure for each country.\n            game: a dictionary like {\"A\": \"1\", \"B\": \"1\"}.\n            key: the country which the scores are calculated for like \"A\".\n            other_side: the other country like \"B\".\n\n        Returns:\n            updated stats for the country row\n        \"\"\"\n        if game and other_side:\n            goal_difference = int(game[key]) - int(game[other_side])\n            row[\"goal_difference\"] += goal_difference\n            row = self._update_game_stats(row, goal_difference)\n\n        return row\n\n    def update_stats(self, key_stats, key: str, game=None, other_side: str = \"\"):\n\"\"\"\n        Update key_stats for a single game.\n\n        Args:\n            key_stats: score board data structure for each country.\n            game: a dictionary like {\"A\": \"1\", \"B\": \"1\"}.\n            country: the country which the scores are calculated for like \"A\".\n            other_side: the other country like \"B\".\n\n        Returns:\n            updated scores for each country\n        \"\"\"\n        row = self.get_row(key_stats, key)\n        row[\"count\"] += 1\n        row = self.update_game(row, key, game, other_side)\n\n        return key_stats\n\n    @staticmethod\n    def fill_score_board(score_board_result, country, row):\n\"\"\"Fill score board data row by row.\"\"\"\n        score_board_result += (\n            f\"{country}  \"\n            f\"wins:{row['wins']} , \"\n            f\"loses:{row['loses']} , \"\n            f\"draws:{row['draws']} , \"\n            f\"goal difference:{row['goal_difference']} , \"\n            f\"points:{row['points']}\\n\"\n        )\n        return score_board_result\n\n    def main(self) -&gt; None:\n\"\"\"Given data from the input; calculates score board.\"\"\"\n        score_board, games, countries = self.key_stats, self.games, self.keys\n        for country in countries:\n            for game in games:\n                if country in game:\n                    other_side = self.get_other_side(game, country)\n                    score_board = self.update_stats(score_board, country, game, other_side)\n        self.key_stats = score_board\n</code></pre>"},{"location":"reference/#pytry.general.world_cup_base.BaseScoreBoard.__init__","title":"<code>__init__(input_func)</code>  <code>abstractmethod</code>","text":"<p>Given input_func; Inits games, BaseScoreBoard attributes.</p> <p>Parameters:</p> Name Type Description Default <code>input_func</code> <code>Any</code> <p>A function for generating input data.</p> required Source code in <code>pytry/general/world_cup_base.py</code> <pre><code>@abstractmethod\ndef __init__(self, input_func: Any) -&gt; None:\n\"\"\"\n    Given input_func; Inits games, BaseScoreBoard attributes.\n\n    Args:\n        input_func: A function for generating input data.\n    \"\"\"\n    super().__init__(input_func)\n    games = []\n    countries = set()\n    self.input_count = 6\n\n    country_pairs = self._get_country_pairs(input_func, self.input_count)\n    scores = self._get_key_data(input_func, self.input_count)\n\n    for i in range(0, self.input_count):\n        games.append({country_pairs[i][0]: scores[i][0], country_pairs[i][1]: scores[i][1]})\n        countries.add(country_pairs[i][0])\n        countries.add(country_pairs[i][1])\n\n    self.games, self.keys = games, countries\n    self.key_stats: Any\n</code></pre>"},{"location":"reference/#pytry.general.world_cup_base.BaseScoreBoard.fill_score_board","title":"<code>fill_score_board(score_board_result, country, row)</code>  <code>staticmethod</code>","text":"<p>Fill score board data row by row.</p> Source code in <code>pytry/general/world_cup_base.py</code> <pre><code>@staticmethod\ndef fill_score_board(score_board_result, country, row):\n\"\"\"Fill score board data row by row.\"\"\"\n    score_board_result += (\n        f\"{country}  \"\n        f\"wins:{row['wins']} , \"\n        f\"loses:{row['loses']} , \"\n        f\"draws:{row['draws']} , \"\n        f\"goal difference:{row['goal_difference']} , \"\n        f\"points:{row['points']}\\n\"\n    )\n    return score_board_result\n</code></pre>"},{"location":"reference/#pytry.general.world_cup_base.BaseScoreBoard.get_other_side","title":"<code>get_other_side(game, country)</code>  <code>staticmethod</code>","text":"<p>Get other side in a game.</p> <p>Parameters:</p> Name Type Description Default <code>game</code> <code>Dict[str, str]</code> <p>a dictionary like {\"A\": \"1\", \"B\": \"1\"}.</p> required <code>country</code> <code>str</code> <p>the country which the scores are calculated for like \"A\".</p> required <p>Returns:</p> Type Description <code>str</code> <p>the the other country like \"B\"</p> Source code in <code>pytry/general/world_cup_base.py</code> <pre><code>@staticmethod\ndef get_other_side(game: Dict[str, str], country: str) -&gt; str:\n\"\"\"\n    Get other side in a game.\n\n    Args:\n        game: a dictionary like {\"A\": \"1\", \"B\": \"1\"}.\n        country: the country which the scores are calculated for like \"A\".\n\n    Returns:\n        the the other country like \"B\"\n    \"\"\"\n    game_sides: List = list(game.keys())\n    game_sides.remove(country)\n    other_side = game_sides[0]\n    return other_side\n</code></pre>"},{"location":"reference/#pytry.general.world_cup_base.BaseScoreBoard.get_row","title":"<code>get_row(key_stats, key)</code>  <code>abstractmethod</code> <code>staticmethod</code>","text":"<p>Get row.</p> Source code in <code>pytry/general/world_cup_base.py</code> <pre><code>@staticmethod\n@abstractmethod\ndef get_row(key_stats, key: str):  # pragma: no cover\n\"\"\"Get row.\"\"\"\n    return {}\n</code></pre>"},{"location":"reference/#pytry.general.world_cup_base.BaseScoreBoard.main","title":"<code>main()</code>","text":"<p>Given data from the input; calculates score board.</p> Source code in <code>pytry/general/world_cup_base.py</code> <pre><code>def main(self) -&gt; None:\n\"\"\"Given data from the input; calculates score board.\"\"\"\n    score_board, games, countries = self.key_stats, self.games, self.keys\n    for country in countries:\n        for game in games:\n            if country in game:\n                other_side = self.get_other_side(game, country)\n                score_board = self.update_stats(score_board, country, game, other_side)\n    self.key_stats = score_board\n</code></pre>"},{"location":"reference/#pytry.general.world_cup_base.BaseScoreBoard.update_game","title":"<code>update_game(row, key, game, other_side)</code>","text":"<p>Update stats of a country for a single game.</p> <p>Parameters:</p> Name Type Description Default <code>row</code> <p>data structure for each country.</p> required <code>game</code> <p>a dictionary like {\"A\": \"1\", \"B\": \"1\"}.</p> required <code>key</code> <p>the country which the scores are calculated for like \"A\".</p> required <code>other_side</code> <p>the other country like \"B\".</p> required <p>Returns:</p> Type Description <p>updated stats for the country row</p> Source code in <code>pytry/general/world_cup_base.py</code> <pre><code>def update_game(self, row, key, game, other_side):\n\"\"\"\n    Update stats of a country for a single game.\n\n    Args:\n        row: data structure for each country.\n        game: a dictionary like {\"A\": \"1\", \"B\": \"1\"}.\n        key: the country which the scores are calculated for like \"A\".\n        other_side: the other country like \"B\".\n\n    Returns:\n        updated stats for the country row\n    \"\"\"\n    if game and other_side:\n        goal_difference = int(game[key]) - int(game[other_side])\n        row[\"goal_difference\"] += goal_difference\n        row = self._update_game_stats(row, goal_difference)\n\n    return row\n</code></pre>"},{"location":"reference/#pytry.general.world_cup_base.BaseScoreBoard.update_stats","title":"<code>update_stats(key_stats, key, game=None, other_side='')</code>","text":"<p>Update key_stats for a single game.</p> <p>Parameters:</p> Name Type Description Default <code>key_stats</code> <p>score board data structure for each country.</p> required <code>game</code> <p>a dictionary like {\"A\": \"1\", \"B\": \"1\"}.</p> <code>None</code> <code>country</code> <p>the country which the scores are calculated for like \"A\".</p> required <code>other_side</code> <code>str</code> <p>the other country like \"B\".</p> <code>''</code> <p>Returns:</p> Type Description <p>updated scores for each country</p> Source code in <code>pytry/general/world_cup_base.py</code> <pre><code>def update_stats(self, key_stats, key: str, game=None, other_side: str = \"\"):\n\"\"\"\n    Update key_stats for a single game.\n\n    Args:\n        key_stats: score board data structure for each country.\n        game: a dictionary like {\"A\": \"1\", \"B\": \"1\"}.\n        country: the country which the scores are calculated for like \"A\".\n        other_side: the other country like \"B\".\n\n    Returns:\n        updated scores for each country\n    \"\"\"\n    row = self.get_row(key_stats, key)\n    row[\"count\"] += 1\n    row = self.update_game(row, key, game, other_side)\n\n    return key_stats\n</code></pre>"},{"location":"reference/#pytry.general.world_cup_dataframe.DFScoreBoard","title":"<code>DFScoreBoard</code>","text":"<p>         Bases: <code>BaseScoreBoard</code></p> <p>DFScoreBoard.</p> <p>Attributes:</p> Name Type Description <code>games</code> <p>List of games. like [{\"A\": \"1\", \"B\": \"1\"}, {\"A\": 1, \"C\": \"3\"}].</p> <code>keys</code> <p>Set of countries. like {\"A\", \"B\", \"C\"}.</p> <code>key_stats</code> <p>data structure for saving wins, loses, draws, goal_difference, points, count for each country.</p> Source code in <code>pytry/general/world_cup_dataframe.py</code> <pre><code>class DFScoreBoard(BaseScoreBoard):\n\"\"\"\n    DFScoreBoard.\n\n    Attributes:\n        games: List of games. like [{\"A\": \"1\", \"B\": \"1\"}, {\"A\": 1, \"C\": \"3\"}].\n        keys: Set of countries. like {\"A\", \"B\", \"C\"}.\n        key_stats: data structure for saving wins, loses, draws, goal_difference, points, count for each country.\n    \"\"\"\n\n    def __init__(self, input_func) -&gt; None:\n\"\"\"\n        Given input_func; Inits key_stats.\n\n        Args:\n            input_func: A function for generating input data.\n        \"\"\"\n        super().__init__(input_func)\n        initial_data = []\n        index_labels = []\n        for country in self.keys:\n            index_labels.append(country)\n            initial_data.append([0, 0, 0, 0, 0, 0])\n        self.key_stats = pd.DataFrame(\n            initial_data, columns=[\"wins\", \"loses\", \"draws\", \"goal_difference\", \"points\", \"count\"], index=index_labels\n        )\n\n    @staticmethod\n    def get_row(key_stats: pd.DataFrame, key: str):\n\"\"\"Get row.\"\"\"\n        return key_stats.loc[key]\n\n    def __repr__(self) -&gt; str:\n\"\"\"Given scores dataframe; create score board representation for all countries.\"\"\"\n        score_board_data: pd.DataFrame = self.key_stats\n        score_board_data = score_board_data.sort_index().sort_values(by=[\"points\"], ascending=False)\n        score_board_result = \"\"\n        for country, row in score_board_data.iterrows():\n            score_board_result = self.fill_score_board(score_board_result, country, row)\n\n        return score_board_result\n</code></pre>"},{"location":"reference/#pytry.general.world_cup_dataframe.DFScoreBoard.__init__","title":"<code>__init__(input_func)</code>","text":"<p>Given input_func; Inits key_stats.</p> <p>Parameters:</p> Name Type Description Default <code>input_func</code> <p>A function for generating input data.</p> required Source code in <code>pytry/general/world_cup_dataframe.py</code> <pre><code>def __init__(self, input_func) -&gt; None:\n\"\"\"\n    Given input_func; Inits key_stats.\n\n    Args:\n        input_func: A function for generating input data.\n    \"\"\"\n    super().__init__(input_func)\n    initial_data = []\n    index_labels = []\n    for country in self.keys:\n        index_labels.append(country)\n        initial_data.append([0, 0, 0, 0, 0, 0])\n    self.key_stats = pd.DataFrame(\n        initial_data, columns=[\"wins\", \"loses\", \"draws\", \"goal_difference\", \"points\", \"count\"], index=index_labels\n    )\n</code></pre>"},{"location":"reference/#pytry.general.world_cup_dataframe.DFScoreBoard.__repr__","title":"<code>__repr__()</code>","text":"<p>Given scores dataframe; create score board representation for all countries.</p> Source code in <code>pytry/general/world_cup_dataframe.py</code> <pre><code>def __repr__(self) -&gt; str:\n\"\"\"Given scores dataframe; create score board representation for all countries.\"\"\"\n    score_board_data: pd.DataFrame = self.key_stats\n    score_board_data = score_board_data.sort_index().sort_values(by=[\"points\"], ascending=False)\n    score_board_result = \"\"\n    for country, row in score_board_data.iterrows():\n        score_board_result = self.fill_score_board(score_board_result, country, row)\n\n    return score_board_result\n</code></pre>"},{"location":"reference/#pytry.general.world_cup_dataframe.DFScoreBoard.get_row","title":"<code>get_row(key_stats, key)</code>  <code>staticmethod</code>","text":"<p>Get row.</p> Source code in <code>pytry/general/world_cup_dataframe.py</code> <pre><code>@staticmethod\ndef get_row(key_stats: pd.DataFrame, key: str):\n\"\"\"Get row.\"\"\"\n    return key_stats.loc[key]\n</code></pre>"},{"location":"reference/#pytry.general.world_cup_dictionary.DictScoreBoard","title":"<code>DictScoreBoard</code>","text":"<p>         Bases: <code>BaseScoreBoard</code></p> <p>DictScoreBoard.</p> <p>Attributes:</p> Name Type Description <code>games</code> <p>List of games. like [{\"A\": \"1\", \"B\": \"1\"}, {\"A\": \"1\", \"C\": \"3\"}].</p> <code>keys</code> <p>Set of countries. like {\"A\", \"B\", \"C\"}.</p> <code>key_stats</code> <p>data structure for saving wins, loses, draws, goal_difference, points, count for each country.</p> Source code in <code>pytry/general/world_cup_dictionary.py</code> <pre><code>class DictScoreBoard(BaseScoreBoard):\n\"\"\"\n    DictScoreBoard.\n\n    Attributes:\n        games: List of games. like [{\"A\": \"1\", \"B\": \"1\"}, {\"A\": \"1\", \"C\": \"3\"}].\n        keys: Set of countries. like {\"A\", \"B\", \"C\"}.\n        key_stats: data structure for saving wins, loses, draws, goal_difference, points, count for each country.\n    \"\"\"\n\n    def __init__(self, input_func: Any) -&gt; None:\n\"\"\"\n        Given input_func; Inits key_stats.\n\n        Args:\n            input_func: A function for generating input data.\n        \"\"\"\n        super().__init__(input_func)\n        self.key_stats = {}\n        for country in self.keys:\n            self.key_stats[country] = {\n                \"country\": country,\n                \"wins\": 0,\n                \"loses\": 0,\n                \"draws\": 0,\n                \"goal_difference\": 0,\n                \"points\": 0,\n                \"count\": 0,\n            }\n\n    @staticmethod\n    def get_row(key_stats: Dict[str, Dict], key: str):\n\"\"\"Get row.\"\"\"\n        return key_stats[key]\n\n    def __repr__(self) -&gt; str:\n\"\"\"Given scores dictionary; create score board representation for all countries.\"\"\"\n        score_board_data: Dict = self.key_stats\n        soretd_countries = sorted(\n            score_board_data, key=lambda x: (-score_board_data[x][\"points\"], score_board_data[x][\"country\"])\n        )\n        score_board_result = \"\"\n        for country in soretd_countries:\n            row = score_board_data[country]\n            score_board_result = self.fill_score_board(score_board_result, country, row)\n\n        return score_board_result\n</code></pre>"},{"location":"reference/#pytry.general.world_cup_dictionary.DictScoreBoard.__init__","title":"<code>__init__(input_func)</code>","text":"<p>Given input_func; Inits key_stats.</p> <p>Parameters:</p> Name Type Description Default <code>input_func</code> <code>Any</code> <p>A function for generating input data.</p> required Source code in <code>pytry/general/world_cup_dictionary.py</code> <pre><code>def __init__(self, input_func: Any) -&gt; None:\n\"\"\"\n    Given input_func; Inits key_stats.\n\n    Args:\n        input_func: A function for generating input data.\n    \"\"\"\n    super().__init__(input_func)\n    self.key_stats = {}\n    for country in self.keys:\n        self.key_stats[country] = {\n            \"country\": country,\n            \"wins\": 0,\n            \"loses\": 0,\n            \"draws\": 0,\n            \"goal_difference\": 0,\n            \"points\": 0,\n            \"count\": 0,\n        }\n</code></pre>"},{"location":"reference/#pytry.general.world_cup_dictionary.DictScoreBoard.__repr__","title":"<code>__repr__()</code>","text":"<p>Given scores dictionary; create score board representation for all countries.</p> Source code in <code>pytry/general/world_cup_dictionary.py</code> <pre><code>def __repr__(self) -&gt; str:\n\"\"\"Given scores dictionary; create score board representation for all countries.\"\"\"\n    score_board_data: Dict = self.key_stats\n    soretd_countries = sorted(\n        score_board_data, key=lambda x: (-score_board_data[x][\"points\"], score_board_data[x][\"country\"])\n    )\n    score_board_result = \"\"\n    for country in soretd_countries:\n        row = score_board_data[country]\n        score_board_result = self.fill_score_board(score_board_result, country, row)\n\n    return score_board_result\n</code></pre>"},{"location":"reference/#pytry.general.world_cup_dictionary.DictScoreBoard.get_row","title":"<code>get_row(key_stats, key)</code>  <code>staticmethod</code>","text":"<p>Get row.</p> Source code in <code>pytry/general/world_cup_dictionary.py</code> <pre><code>@staticmethod\ndef get_row(key_stats: Dict[str, Dict], key: str):\n\"\"\"Get row.\"\"\"\n    return key_stats[key]\n</code></pre>"},{"location":"tutorials/","title":"Tutorials","text":"<p>This part of the project documentation focuses on a learning-oriented approach. You'll learn how to get started with the code in this project.</p> <p>Note: Expand this section by considering the following points:</p> <ul> <li>Help newcomers with getting started</li> <li>Teach readers about your library by making them     write code</li> <li>Inspire confidence through examples that work for     everyone, repeatably</li> <li>Give readers an immediate sense of achievement</li> <li>Show concrete examples, no abstractions</li> <li>Provide the minimum necessary explanation</li> <li>Avoid any distractions</li> </ul>"}]}