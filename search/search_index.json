{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to pytry","text":"<p>This site contains the project documentation for the <code>pytry</code> project.</p>"},{"location":"#table-of-contents","title":"Table Of Contents","text":"<p>The documentation consists of two separate parts:</p> <ol> <li>Usage</li> <li>Reference</li> </ol> <p>Quickly find what you're looking for depending on your use case by looking at the different pages.</p>"},{"location":"#project-overview","title":"Project Overview","text":"<p>pytry is a place to try python.</p>"},{"location":"tutorials/","title":"Usage","text":"<p>First download the code from pytry GitHub repository and install it:</p> <pre><code>    git clone git@github.com:sshmo/pytry.git\n    cd pytry\n    pip install .\n</code></pre> <p>Usage:</p> <pre><code>    from pytry.general.world_cup_dataframe import DFScoreBoard\n    score_board = DFScoreBoard(input, 6)\n    score_board.main()\n    print(score_board)\n</code></pre>"},{"location":"reference/","title":"prtry","text":"<p>pytry is a place to try python.</p>"},{"location":"reference/general/","title":"General","text":"<p>General problems.</p>"},{"location":"reference/general/base/","title":"Base","text":"<p>Base implementation.</p>"},{"location":"reference/general/base/#pytry.general.base.Base","title":"<code>Base</code>","text":"<p>         Bases: <code>ABC</code></p> <p>Base.</p> <p>Attributes:</p> Name Type Description <code>input_count</code> <code>int</code> <p>number of entry data.</p> <code>keys</code> <code>Set[str]</code> <p>set of keys for which we calculate and represent statistics.</p> <code>key_data</code> <code>Any</code> <p>data structure for saving key data.</p> <code>key_stats</code> <code>Any</code> <p>data structure for calculating key statistics.</p> Source code in <code>pytry/general/base.py</code> <pre><code>class Base(ABC):\n\"\"\"Base.\n\n    Attributes:\n        input_count: number of entry data.\n        keys: set of keys for which we calculate and represent statistics.\n        key_data: data structure for saving key data.\n        key_stats: data structure for calculating key statistics.\n    \"\"\"\n\n    @abstractmethod\n    def __init__(self, input_func: Any, default_count: Optional[int]) -&gt; None:\n\"\"\"Given input_func; Inits Base attributes.\n\n        Args:\n            input_func: A function for generating input data.\n            default_count: default number of keys if input_count is not specified.\n        \"\"\"\n        if isinstance(default_count, int) and default_count &lt; 0:\n            raise ValueError(f\"Invalid value for default count: {default_count}\")\n        self.input_count: int = default_count if default_count is not None else self.get_input_count(input_func)\n        self.keys: Set[str]\n        self.key_stats: Any\n        self.key_data: Any\n\n    @staticmethod\n    @abstractmethod\n    def _get_key_data(input_func: Any, input_count: int):\n\"\"\"get_key_data.\"\"\"\n\n    @staticmethod\n    def get_input_count(input_func: Any) -&gt; int:\n\"\"\"get_input_count.\"\"\"\n        while True:\n            num: str = input_func()\n            input_count = int(num) if num.isdigit() else None\n            if input_count and input_count &gt; 0:\n                break\n            print(\"Invalid number!\")\n        return input_count\n\n    def __repr__(self) -&gt; str:  # pragma: no cover\n\"\"\"Given key_stats; create key_stats representation for all keys.\"\"\"\n        return \"\"\n\n    @abstractmethod\n    def update_stats(self, key_stats, key) -&gt; Any:\n\"\"\"Update stats of a key for a single row.\n\n        Returns:\n            updated stats for each key\n        \"\"\"\n\n    @abstractmethod\n    def main(self) -&gt; None:\n\"\"\"Given key_data from the input; calculates key_stats.\"\"\"\n</code></pre>"},{"location":"reference/general/base/#pytry.general.base.Base.__init__","title":"<code>__init__(input_func, default_count)</code>  <code>abstractmethod</code>","text":"<p>Given input_func; Inits Base attributes.</p> <p>Parameters:</p> Name Type Description Default <code>input_func</code> <code>Any</code> <p>A function for generating input data.</p> required <code>default_count</code> <code>Optional[int]</code> <p>default number of keys if input_count is not specified.</p> required Source code in <code>pytry/general/base.py</code> <pre><code>@abstractmethod\ndef __init__(self, input_func: Any, default_count: Optional[int]) -&gt; None:\n\"\"\"Given input_func; Inits Base attributes.\n\n    Args:\n        input_func: A function for generating input data.\n        default_count: default number of keys if input_count is not specified.\n    \"\"\"\n    if isinstance(default_count, int) and default_count &lt; 0:\n        raise ValueError(f\"Invalid value for default count: {default_count}\")\n    self.input_count: int = default_count if default_count is not None else self.get_input_count(input_func)\n    self.keys: Set[str]\n    self.key_stats: Any\n    self.key_data: Any\n</code></pre>"},{"location":"reference/general/base/#pytry.general.base.Base.__repr__","title":"<code>__repr__()</code>","text":"<p>Given key_stats; create key_stats representation for all keys.</p> Source code in <code>pytry/general/base.py</code> <pre><code>def __repr__(self) -&gt; str:  # pragma: no cover\n\"\"\"Given key_stats; create key_stats representation for all keys.\"\"\"\n    return \"\"\n</code></pre>"},{"location":"reference/general/base/#pytry.general.base.Base.get_input_count","title":"<code>get_input_count(input_func)</code>  <code>staticmethod</code>","text":"<p>get_input_count.</p> Source code in <code>pytry/general/base.py</code> <pre><code>@staticmethod\ndef get_input_count(input_func: Any) -&gt; int:\n\"\"\"get_input_count.\"\"\"\n    while True:\n        num: str = input_func()\n        input_count = int(num) if num.isdigit() else None\n        if input_count and input_count &gt; 0:\n            break\n        print(\"Invalid number!\")\n    return input_count\n</code></pre>"},{"location":"reference/general/base/#pytry.general.base.Base.main","title":"<code>main()</code>  <code>abstractmethod</code>","text":"<p>Given key_data from the input; calculates key_stats.</p> Source code in <code>pytry/general/base.py</code> <pre><code>@abstractmethod\ndef main(self) -&gt; None:\n\"\"\"Given key_data from the input; calculates key_stats.\"\"\"\n</code></pre>"},{"location":"reference/general/base/#pytry.general.base.Base.update_stats","title":"<code>update_stats(key_stats, key)</code>  <code>abstractmethod</code>","text":"<p>Update stats of a key for a single row.</p> <p>Returns:</p> Type Description <code>Any</code> <p>updated stats for each key</p> Source code in <code>pytry/general/base.py</code> <pre><code>@abstractmethod\ndef update_stats(self, key_stats, key) -&gt; Any:\n\"\"\"Update stats of a key for a single row.\n\n    Returns:\n        updated stats for each key\n    \"\"\"\n</code></pre>"},{"location":"reference/general/favorite_genres/","title":"Favorite genres","text":"<p>Favorite genres.</p> <p>In a survey, moviegoers were asked to list 3 of their favorite genres. They are given 6 different genres to choose from, including:</p> <p>Horror, Romance, Comedy, History, Adventure, Action.</p> <pre><code>Write a program that:\n\ntakes the number of people,\nthen takes the name of each person with their favorite genres\nand prints the name of each genre and the number of people interested in that genre\nin the order of the most interested in the output.\n(If the level of interest in different genres is the same,\nprint in the order of the English alphabet in the output.)\nIf no genre is selected, consider its value as zero and print the name and number 0 in the output.\n\nInput:\n4\nhossein Horror Romance Comedy\nmohsen Horror Action Comedy\nmina Adventure Action History\nsajjad Romance History Action\n\nOutput:\nAction : 3\nComedy : 2\nHistory : 2\nHorror : 2\nRomance : 2\nAdventure : 1\n</code></pre>"},{"location":"reference/general/favorite_genres/#pytry.general.favorite_genres.FavoriteGeneres","title":"<code>FavoriteGeneres</code>","text":"<p>         Bases: <code>Base</code></p> <p>FavoriteGeneres.</p> <p>Attributes:</p> Name Type Description <code>input_count</code> <code>int</code> <p>number of entry data.</p> <code>keys</code> <code>Set[str]</code> <p>set of generes for which we calculate and represent statistics.</p> <code>key_data</code> <code>Dict[str, List[str]]</code> <p>data structure for saving genere data.</p> <code>key_stats</code> <code>Dict[str, Dict[str, Any]]</code> <p>data structure for saving genere statistics.</p> Source code in <code>pytry/general/favorite_genres.py</code> <pre><code>class FavoriteGeneres(Base):\n\"\"\"FavoriteGeneres.\n\n    Attributes:\n        input_count: number of entry data.\n        keys: set of generes for which we calculate and represent statistics.\n        key_data: data structure for saving genere data.\n        key_stats: data structure for saving genere statistics.\n    \"\"\"\n\n    def __init__(self, input_func: Any, default_count: Optional[int] = None) -&gt; None:\n\"\"\"Given the number of people; Inits FavoriteGeneres attributes.\n\n        Args:\n            input_func: a function for generating input numbers.\n            default_count: default number of keys if input_count is not specified.\n        \"\"\"\n        super().__init__(input_func, default_count)\n        self.input_count: int\n        self.keys: Set[str] = set()\n        self.key_data: Dict[str, List[str]] = self._get_key_data(input_func, self.input_count)\n        for _, value in self.key_data.items():\n            self.keys.update(set(value))\n\n        self.key_stats: Dict[str, Dict[str, Any]] = {}\n        for genere in self.keys:\n            self.key_stats[genere] = {\n                \"genere\": genere,\n                \"count\": 0,\n            }\n\n    @staticmethod\n    def get_input_count(input_func: Any) -&gt; int:\n\"\"\"get_input_count.\"\"\"\n        return Base.get_input_count(input_func)\n\n    @staticmethod\n    def _get_key_data(input_func: Any, input_count: int) -&gt; Dict[str, List[str]]:\n        key_data = {}\n        while True:\n            data: str = input_func()\n            datal_list = data.split(\" \")\n            name = datal_list[0]\n            key_data[name] = datal_list[1:]\n            if len(key_data) == input_count:\n                break\n        return key_data\n\n    @staticmethod\n    def fill_board(key_repr, key, row):\n\"\"\"Fill genere stats data row by row.\"\"\"\n        key_repr += f\"{key} : {row['count']}\\n\"\n        return key_repr\n\n    def __repr__(self) -&gt; str:\n\"\"\"Given genere_board; create genere stat representation for all generes.\"\"\"\n        genere_board_data: Dict = self.key_stats\n        soretd_generes = sorted(\n            genere_board_data, key=lambda x: (-genere_board_data[x][\"count\"], genere_board_data[x][\"genere\"])\n        )\n        result = \"\"\n        for genere in soretd_generes:\n            row = genere_board_data[genere]\n            result = self.fill_board(result, genere, row)\n\n        return result\n\n    def update_stats(self, key_stats, key) -&gt; Dict[str, Dict[str, Any]]:\n\"\"\"Update stats of a genere for a single row.\"\"\"\n        key_stats[key][\"count\"] += 1\n        return key_stats\n\n    def main(self) -&gt; None:\n\"\"\"Given genere data from the input; calculate genere stats for all generes.\"\"\"\n        for genere in self.keys:\n            for _, list_value in self.key_data.items():\n                for value in list_value:\n                    if genere == value:\n                        self.key_stats = self.update_stats(self.key_stats, genere)\n</code></pre>"},{"location":"reference/general/favorite_genres/#pytry.general.favorite_genres.FavoriteGeneres.__init__","title":"<code>__init__(input_func, default_count=None)</code>","text":"<p>Given the number of people; Inits FavoriteGeneres attributes.</p> <p>Parameters:</p> Name Type Description Default <code>input_func</code> <code>Any</code> <p>a function for generating input numbers.</p> required <code>default_count</code> <code>Optional[int]</code> <p>default number of keys if input_count is not specified.</p> <code>None</code> Source code in <code>pytry/general/favorite_genres.py</code> <pre><code>def __init__(self, input_func: Any, default_count: Optional[int] = None) -&gt; None:\n\"\"\"Given the number of people; Inits FavoriteGeneres attributes.\n\n    Args:\n        input_func: a function for generating input numbers.\n        default_count: default number of keys if input_count is not specified.\n    \"\"\"\n    super().__init__(input_func, default_count)\n    self.input_count: int\n    self.keys: Set[str] = set()\n    self.key_data: Dict[str, List[str]] = self._get_key_data(input_func, self.input_count)\n    for _, value in self.key_data.items():\n        self.keys.update(set(value))\n\n    self.key_stats: Dict[str, Dict[str, Any]] = {}\n    for genere in self.keys:\n        self.key_stats[genere] = {\n            \"genere\": genere,\n            \"count\": 0,\n        }\n</code></pre>"},{"location":"reference/general/favorite_genres/#pytry.general.favorite_genres.FavoriteGeneres.__repr__","title":"<code>__repr__()</code>","text":"<p>Given genere_board; create genere stat representation for all generes.</p> Source code in <code>pytry/general/favorite_genres.py</code> <pre><code>def __repr__(self) -&gt; str:\n\"\"\"Given genere_board; create genere stat representation for all generes.\"\"\"\n    genere_board_data: Dict = self.key_stats\n    soretd_generes = sorted(\n        genere_board_data, key=lambda x: (-genere_board_data[x][\"count\"], genere_board_data[x][\"genere\"])\n    )\n    result = \"\"\n    for genere in soretd_generes:\n        row = genere_board_data[genere]\n        result = self.fill_board(result, genere, row)\n\n    return result\n</code></pre>"},{"location":"reference/general/favorite_genres/#pytry.general.favorite_genres.FavoriteGeneres.fill_board","title":"<code>fill_board(key_repr, key, row)</code>  <code>staticmethod</code>","text":"<p>Fill genere stats data row by row.</p> Source code in <code>pytry/general/favorite_genres.py</code> <pre><code>@staticmethod\ndef fill_board(key_repr, key, row):\n\"\"\"Fill genere stats data row by row.\"\"\"\n    key_repr += f\"{key} : {row['count']}\\n\"\n    return key_repr\n</code></pre>"},{"location":"reference/general/favorite_genres/#pytry.general.favorite_genres.FavoriteGeneres.get_input_count","title":"<code>get_input_count(input_func)</code>  <code>staticmethod</code>","text":"<p>get_input_count.</p> Source code in <code>pytry/general/favorite_genres.py</code> <pre><code>@staticmethod\ndef get_input_count(input_func: Any) -&gt; int:\n\"\"\"get_input_count.\"\"\"\n    return Base.get_input_count(input_func)\n</code></pre>"},{"location":"reference/general/favorite_genres/#pytry.general.favorite_genres.FavoriteGeneres.main","title":"<code>main()</code>","text":"<p>Given genere data from the input; calculate genere stats for all generes.</p> Source code in <code>pytry/general/favorite_genres.py</code> <pre><code>def main(self) -&gt; None:\n\"\"\"Given genere data from the input; calculate genere stats for all generes.\"\"\"\n    for genere in self.keys:\n        for _, list_value in self.key_data.items():\n            for value in list_value:\n                if genere == value:\n                    self.key_stats = self.update_stats(self.key_stats, genere)\n</code></pre>"},{"location":"reference/general/favorite_genres/#pytry.general.favorite_genres.FavoriteGeneres.update_stats","title":"<code>update_stats(key_stats, key)</code>","text":"<p>Update stats of a genere for a single row.</p> Source code in <code>pytry/general/favorite_genres.py</code> <pre><code>def update_stats(self, key_stats, key) -&gt; Dict[str, Dict[str, Any]]:\n\"\"\"Update stats of a genere for a single row.\"\"\"\n    key_stats[key][\"count\"] += 1\n    return key_stats\n</code></pre>"},{"location":"reference/general/index_words/","title":"Index words","text":"<p>Index words.</p> <p>Words that start with capital letters.</p> <pre><code>Write a program that:\n\nprints index words (words that start with capital letters)\nalong with the word number (nth word) from a text.\nIf a word with this feature is not found in the text, it will print \"None\" in the output.\nYou should not consider the words at the beginning of the sentence as index words.\n(number the words start from one.)\n\nNumbers are not counted.\nThe only sign used in the sentence is the comma.\nBe sure to remove the dot or comma at the end of the word.\n\nInput:\nThe Persian League is the largest sport event dedicated to the deprived areas of Iran.\nThe Persian League promotes peace and friendship.\nThis video was captured by one of our heroes who wishes peace.\n\nOutput:\n2:Persian\n3:League\n15:Iran\n17:Persian\n18:League\n</code></pre>"},{"location":"reference/general/index_words/#pytry.general.index_words.IndexWords","title":"<code>IndexWords</code>","text":"<p>         Bases: <code>Base</code></p> <p>IndexWords.</p> <p>Attributes:</p> Name Type Description <code>input_count</code> <code>int</code> <p>number of entry data.</p> <code>key_data</code> <code>str</code> <p>input text corpus.</p> <code>key_stats</code> <code>Dict[int, str]</code> <p>data structure for saving index word position in the text corpus.</p> Source code in <code>pytry/general/index_words.py</code> <pre><code>class IndexWords(Base):\n\"\"\"IndexWords.\n\n    Attributes:\n        input_count: number of entry data.\n        key_data: input text corpus.\n        key_stats:  data structure for saving index word position in the text corpus.\n    \"\"\"\n\n    def __init__(self, input_func: Any, default_count: Optional[int] = None) -&gt; None:\n\"\"\"Given the number of people; Inits IndexWords attributes.\n\n        Args:\n            input_func: a function for generating input numbers.\n            default_count: default number of keys if input_count is not specified.\n        \"\"\"\n        super().__init__(input_func, default_count)\n        self.input_count: int\n        self.key_data: str = input_func()\n        self.key_stats: Dict[int, str]\n\n    @staticmethod\n    def _get_key_data(input_func: Any, input_count: int):\n\"\"\"Not Implemented.\"\"\"\n\n    def update_stats(self, key_stats, key):\n\"\"\"Not Implemented.\"\"\"\n\n    def __repr__(self) -&gt; str:\n\"\"\"Given key_stats; create index word representation.\"\"\"\n        if not self.key_stats:\n            return \"None\"\n        word_repr = \"\"\n        sorted_rsult = sorted(self.key_stats)\n        for ind in sorted_rsult:\n            word_repr += f\"{ind}:{self.key_stats[ind]}\\n\"\n        return word_repr\n\n    @staticmethod\n    def _isword(word: str) -&gt; bool:\n        return all((char.isascii() or char in \".,\") for char in list(word))\n\n    def _isvalidword(self, word: str) -&gt; bool:\n        if word and (word[0].isupper()) and self._isword(word):\n            return True\n        return False\n\n    def _isvalid(self, i: int, word: str, words: List[str]) -&gt; bool:\n        if (i != 0) and not words[i - 1].endswith(\".\") and self._isvalidword(word):\n            return True\n        return False\n\n    def main(self) -&gt; None:\n\"\"\"Given key_data; calculates index word stats.\"\"\"\n        words = self.key_data.split(\" \")\n        key_stats = {i + 1: word for i, word in enumerate(words) if self._isvalid(i, word, words)}\n        self.key_stats = {k: v.replace(\".\", \"\").replace(\",\", \"\") for k, v in key_stats.items()}\n</code></pre>"},{"location":"reference/general/index_words/#pytry.general.index_words.IndexWords.__init__","title":"<code>__init__(input_func, default_count=None)</code>","text":"<p>Given the number of people; Inits IndexWords attributes.</p> <p>Parameters:</p> Name Type Description Default <code>input_func</code> <code>Any</code> <p>a function for generating input numbers.</p> required <code>default_count</code> <code>Optional[int]</code> <p>default number of keys if input_count is not specified.</p> <code>None</code> Source code in <code>pytry/general/index_words.py</code> <pre><code>def __init__(self, input_func: Any, default_count: Optional[int] = None) -&gt; None:\n\"\"\"Given the number of people; Inits IndexWords attributes.\n\n    Args:\n        input_func: a function for generating input numbers.\n        default_count: default number of keys if input_count is not specified.\n    \"\"\"\n    super().__init__(input_func, default_count)\n    self.input_count: int\n    self.key_data: str = input_func()\n    self.key_stats: Dict[int, str]\n</code></pre>"},{"location":"reference/general/index_words/#pytry.general.index_words.IndexWords.__repr__","title":"<code>__repr__()</code>","text":"<p>Given key_stats; create index word representation.</p> Source code in <code>pytry/general/index_words.py</code> <pre><code>def __repr__(self) -&gt; str:\n\"\"\"Given key_stats; create index word representation.\"\"\"\n    if not self.key_stats:\n        return \"None\"\n    word_repr = \"\"\n    sorted_rsult = sorted(self.key_stats)\n    for ind in sorted_rsult:\n        word_repr += f\"{ind}:{self.key_stats[ind]}\\n\"\n    return word_repr\n</code></pre>"},{"location":"reference/general/index_words/#pytry.general.index_words.IndexWords.main","title":"<code>main()</code>","text":"<p>Given key_data; calculates index word stats.</p> Source code in <code>pytry/general/index_words.py</code> <pre><code>def main(self) -&gt; None:\n\"\"\"Given key_data; calculates index word stats.\"\"\"\n    words = self.key_data.split(\" \")\n    key_stats = {i + 1: word for i, word in enumerate(words) if self._isvalid(i, word, words)}\n    self.key_stats = {k: v.replace(\".\", \"\").replace(\",\", \"\") for k, v in key_stats.items()}\n</code></pre>"},{"location":"reference/general/index_words/#pytry.general.index_words.IndexWords.update_stats","title":"<code>update_stats(key_stats, key)</code>","text":"<p>Not Implemented.</p> Source code in <code>pytry/general/index_words.py</code> <pre><code>def update_stats(self, key_stats, key):\n\"\"\"Not Implemented.\"\"\"\n</code></pre>"},{"location":"reference/general/max_prime/","title":"Max prime","text":"<p>Max primes.</p> <p>The max number that has the highest number of prime factors.</p> <pre><code>Write a program that:\n\nreads 10 numbers from the input.\nprints the number that has the highest number of prime factors\nalong with the number of its prime factors in the output.\nIf there are several numbers in this state, print the largest one.\n\nInput:\n123\n43\n54\n12\n76\n84\n98\n678\n543\n231\n\nOutput:\n678 3\n</code></pre>"},{"location":"reference/general/max_prime/#pytry.general.max_prime.MaxPrime","title":"<code>MaxPrime</code>","text":"<p>         Bases: <code>Base</code></p> <p>MaxPrime.</p> <p>Attributes:</p> Name Type Description <code>input_count</code> <code>int</code> <p>number of entry integers.</p> <code>key_data</code> <code>List[int]</code> <p>a list of integers.</p> <code>key_stats</code> <code>Dict[int, int]</code> <p>key value count of prime factors for each number.</p> Source code in <code>pytry/general/max_prime.py</code> <pre><code>class MaxPrime(Base):\n\"\"\"MaxPrime.\n\n    Attributes:\n        input_count: number of entry integers.\n        key_data: a list of integers.\n        key_stats: key value count of prime factors for each number.\n    \"\"\"\n\n    def __init__(self, input_func: Any, default_count: Optional[int] = None) -&gt; None:\n\"\"\"Given random number of input strings; Inits MaxPrime attributes.\n\n        Args:\n            input_func: a function for generating input numbers.\n            default_count: default number of keys if input_count is not specified.\n        \"\"\"\n        self.input_count: int\n        super().__init__(input_func, default_count)\n        self.key_data: List[int] = self._get_key_data(input_func, self.input_count)\n        self.key_stats: Dict[int, int] = {}\n        for key in self.key_data:\n            self.key_stats[key] = 0\n\n    @staticmethod\n    def _get_key_data(input_func: Any, input_count: int) -&gt; List[int]:\n        key_data: List = []\n        while input_count - len(key_data):\n            num_input: str = input_func()\n            num: Optional[int] = int(num_input) if num_input.isdigit() else None\n            if num and num &gt; 0:\n                key_data.append(num)\n                key_data = list(set(key_data))  # deduplicate key_data\n            else:\n                print(\"Invalid number!\")\n        return key_data\n\n    def __repr__(self) -&gt; str:\n\"\"\"Return max count of prime factors for the max number.\"\"\"\n        max_value = max(self.key_stats.values())\n        keys = [key for key, value in self.key_stats.items() if value == max_value]\n        max_number = max(keys)\n        return f\"{max_number} {max_value}\"\n\n    @staticmethod\n    def is_prime(num: int) -&gt; bool:\n\"\"\"Check if number is prime.\n\n        Args:\n            num: an integer.\n\n        Returns:\n            true if prime else false.\n        \"\"\"\n        return all(num % x != 0 for x in range(2, int(num**0.5) + 1)) if num &gt; 1 else False\n\n    def get_prime_list(self, nums: List[int]) -&gt; List[int]:\n\"\"\"Given numbers list, returns all prime numbers lower than max number.\n\n        Args:\n            nums: all input numbers.\n\n        Returns:\n            all prime numbers lower than max number.\n        \"\"\"\n        primes = []\n        if nums:\n            max_num = max(nums) + 1\n            for i in range(2, max_num):\n                if self.is_prime(i):\n                    primes.append(i)\n        return primes\n\n    def update_stats(self, key_stats, key) -&gt; Dict[int, int]:\n\"\"\"Update count of of prime factors for a number.\"\"\"\n        key_stats[key] += 1\n        return key_stats\n\n    def main(self) -&gt; None:\n\"\"\"Given numbers; calculate count of prime factors for all numbers.\"\"\"\n        numbers = self.key_data\n        prime_list = self.get_prime_list(numbers)\n        for number in numbers:\n            for prime in prime_list:\n                if number % prime == 0:\n                    self.key_stats = self.update_stats(self.key_stats, number)\n</code></pre>"},{"location":"reference/general/max_prime/#pytry.general.max_prime.MaxPrime.__init__","title":"<code>__init__(input_func, default_count=None)</code>","text":"<p>Given random number of input strings; Inits MaxPrime attributes.</p> <p>Parameters:</p> Name Type Description Default <code>input_func</code> <code>Any</code> <p>a function for generating input numbers.</p> required <code>default_count</code> <code>Optional[int]</code> <p>default number of keys if input_count is not specified.</p> <code>None</code> Source code in <code>pytry/general/max_prime.py</code> <pre><code>def __init__(self, input_func: Any, default_count: Optional[int] = None) -&gt; None:\n\"\"\"Given random number of input strings; Inits MaxPrime attributes.\n\n    Args:\n        input_func: a function for generating input numbers.\n        default_count: default number of keys if input_count is not specified.\n    \"\"\"\n    self.input_count: int\n    super().__init__(input_func, default_count)\n    self.key_data: List[int] = self._get_key_data(input_func, self.input_count)\n    self.key_stats: Dict[int, int] = {}\n    for key in self.key_data:\n        self.key_stats[key] = 0\n</code></pre>"},{"location":"reference/general/max_prime/#pytry.general.max_prime.MaxPrime.__repr__","title":"<code>__repr__()</code>","text":"<p>Return max count of prime factors for the max number.</p> Source code in <code>pytry/general/max_prime.py</code> <pre><code>def __repr__(self) -&gt; str:\n\"\"\"Return max count of prime factors for the max number.\"\"\"\n    max_value = max(self.key_stats.values())\n    keys = [key for key, value in self.key_stats.items() if value == max_value]\n    max_number = max(keys)\n    return f\"{max_number} {max_value}\"\n</code></pre>"},{"location":"reference/general/max_prime/#pytry.general.max_prime.MaxPrime.get_prime_list","title":"<code>get_prime_list(nums)</code>","text":"<p>Given numbers list, returns all prime numbers lower than max number.</p> <p>Parameters:</p> Name Type Description Default <code>nums</code> <code>List[int]</code> <p>all input numbers.</p> required <p>Returns:</p> Type Description <code>List[int]</code> <p>all prime numbers lower than max number.</p> Source code in <code>pytry/general/max_prime.py</code> <pre><code>def get_prime_list(self, nums: List[int]) -&gt; List[int]:\n\"\"\"Given numbers list, returns all prime numbers lower than max number.\n\n    Args:\n        nums: all input numbers.\n\n    Returns:\n        all prime numbers lower than max number.\n    \"\"\"\n    primes = []\n    if nums:\n        max_num = max(nums) + 1\n        for i in range(2, max_num):\n            if self.is_prime(i):\n                primes.append(i)\n    return primes\n</code></pre>"},{"location":"reference/general/max_prime/#pytry.general.max_prime.MaxPrime.is_prime","title":"<code>is_prime(num)</code>  <code>staticmethod</code>","text":"<p>Check if number is prime.</p> <p>Parameters:</p> Name Type Description Default <code>num</code> <code>int</code> <p>an integer.</p> required <p>Returns:</p> Type Description <code>bool</code> <p>true if prime else false.</p> Source code in <code>pytry/general/max_prime.py</code> <pre><code>@staticmethod\ndef is_prime(num: int) -&gt; bool:\n\"\"\"Check if number is prime.\n\n    Args:\n        num: an integer.\n\n    Returns:\n        true if prime else false.\n    \"\"\"\n    return all(num % x != 0 for x in range(2, int(num**0.5) + 1)) if num &gt; 1 else False\n</code></pre>"},{"location":"reference/general/max_prime/#pytry.general.max_prime.MaxPrime.main","title":"<code>main()</code>","text":"<p>Given numbers; calculate count of prime factors for all numbers.</p> Source code in <code>pytry/general/max_prime.py</code> <pre><code>def main(self) -&gt; None:\n\"\"\"Given numbers; calculate count of prime factors for all numbers.\"\"\"\n    numbers = self.key_data\n    prime_list = self.get_prime_list(numbers)\n    for number in numbers:\n        for prime in prime_list:\n            if number % prime == 0:\n                self.key_stats = self.update_stats(self.key_stats, number)\n</code></pre>"},{"location":"reference/general/max_prime/#pytry.general.max_prime.MaxPrime.update_stats","title":"<code>update_stats(key_stats, key)</code>","text":"<p>Update count of of prime factors for a number.</p> Source code in <code>pytry/general/max_prime.py</code> <pre><code>def update_stats(self, key_stats, key) -&gt; Dict[int, int]:\n\"\"\"Update count of of prime factors for a number.\"\"\"\n    key_stats[key] += 1\n    return key_stats\n</code></pre>"},{"location":"reference/general/olympiad/","title":"Olympiad","text":"<p>Computer Olympiad list.</p> <p>Ahmed is sending the final list of the names of those accepted to the Computer Olympiad to the results review committee so that the committee can print the entry cards for the final competitions, but because a specific format was not defined for registering the names during the test, the participants did not used standard names, besides, the language with which they participated in the competition is written in the continuation of each name, and the gender of the people is also specified at the beginning of each name. The standard form of names is that the first letter of the name is uppercase and the rest of the letters of the name are lowercase.</p> <pre><code>Write a program that:\n\nreads the number, name, gender, and language of the accepted candidates\nfrom the input and separates the names based on their gender,\nstandardizes them, and writes the language in front of each name with\nwhich they participated in the competition.\n(In the output, the female gender should be printed first and then the male gender.\nThe names of each gender should be printed in the order of the English alphabet.)\n\nInput:\n4\nm.hosSein.python\nf.miNa.C\nm.aHMad.C++\nf.Sara.java\n\nOutput:\nf Mina C\nf Sara java\nm Ahmad C++\nm Hossein python\n</code></pre>"},{"location":"reference/general/olympiad/#pytry.general.olympiad.Olympiad","title":"<code>Olympiad</code>","text":"<p>         Bases: <code>Base</code></p> <p>Olympiad.</p> <p>Attributes:</p> Name Type Description <code>input_count</code> <code>int</code> <p>int : number of entry people.</p> <code>key_data</code> <code>Dict[str, Dict[str, str]]</code> <p>data structure for saving people data.</p> Source code in <code>pytry/general/olympiad.py</code> <pre><code>class Olympiad(Base):\n\"\"\"Olympiad.\n\n    Attributes:\n        input_count: int : number of entry people.\n        key_data: data structure for saving people data.\n    \"\"\"\n\n    def __init__(self, input_func: Any, default_count: Optional[int] = None) -&gt; None:\n\"\"\"Given the number of people; Inits Olympiad attributes.\n\n        Args:\n            input_func: a function for generating input numbers.\n            default_count: default number of keys if input_count is not specified.\n        \"\"\"\n        super().__init__(input_func, default_count)\n        self.input_count: int\n        self.key_data: Dict[str, Dict[str, str]] = self._get_key_data(input_func, self.input_count)\n\n    @staticmethod\n    def _get_key_data(input_func: Any, input_count: int) -&gt; Dict[str, Dict[str, str]]:\n        key_data = {}\n        while True:\n            data: str = input_func()\n            datal_list: List[str] = data.split(\".\")\n            program: str = datal_list.pop()\n            name: str = datal_list.pop().lower().capitalize()\n            gender: str = datal_list.pop()\n\n            key_data[name] = {\"name\": name, \"program\": program, \"gender\": gender}\n            if len(key_data) == input_count:\n                break\n        return key_data\n\n    @staticmethod\n    def get_input_count(input_func: Any) -&gt; int:\n\"\"\"get_input_count.\"\"\"\n        return Base.get_input_count(input_func)\n\n    def __repr__(self) -&gt; str:\n\"\"\"Given key_data; create standardized olympiad representation for all persons.\"\"\"\n        data_repr = \"\"\n        data = self.key_data\n        soretd_names = sorted(data, key=lambda x: (data[x][\"gender\"], data[x][\"name\"]))\n        for name in soretd_names:\n            data_repr += f'{data[name][\"gender\"]} {data[name][\"name\"]} {data[name][\"program\"]}\\n'\n\n        return data_repr\n\n    def update_stats(self, key_stats, key):\n\"\"\"Not Implemented.\"\"\"\n\n    def main(self) -&gt; None:\n\"\"\"Not Implemented.\"\"\"\n</code></pre>"},{"location":"reference/general/olympiad/#pytry.general.olympiad.Olympiad.__init__","title":"<code>__init__(input_func, default_count=None)</code>","text":"<p>Given the number of people; Inits Olympiad attributes.</p> <p>Parameters:</p> Name Type Description Default <code>input_func</code> <code>Any</code> <p>a function for generating input numbers.</p> required <code>default_count</code> <code>Optional[int]</code> <p>default number of keys if input_count is not specified.</p> <code>None</code> Source code in <code>pytry/general/olympiad.py</code> <pre><code>def __init__(self, input_func: Any, default_count: Optional[int] = None) -&gt; None:\n\"\"\"Given the number of people; Inits Olympiad attributes.\n\n    Args:\n        input_func: a function for generating input numbers.\n        default_count: default number of keys if input_count is not specified.\n    \"\"\"\n    super().__init__(input_func, default_count)\n    self.input_count: int\n    self.key_data: Dict[str, Dict[str, str]] = self._get_key_data(input_func, self.input_count)\n</code></pre>"},{"location":"reference/general/olympiad/#pytry.general.olympiad.Olympiad.__repr__","title":"<code>__repr__()</code>","text":"<p>Given key_data; create standardized olympiad representation for all persons.</p> Source code in <code>pytry/general/olympiad.py</code> <pre><code>def __repr__(self) -&gt; str:\n\"\"\"Given key_data; create standardized olympiad representation for all persons.\"\"\"\n    data_repr = \"\"\n    data = self.key_data\n    soretd_names = sorted(data, key=lambda x: (data[x][\"gender\"], data[x][\"name\"]))\n    for name in soretd_names:\n        data_repr += f'{data[name][\"gender\"]} {data[name][\"name\"]} {data[name][\"program\"]}\\n'\n\n    return data_repr\n</code></pre>"},{"location":"reference/general/olympiad/#pytry.general.olympiad.Olympiad.get_input_count","title":"<code>get_input_count(input_func)</code>  <code>staticmethod</code>","text":"<p>get_input_count.</p> Source code in <code>pytry/general/olympiad.py</code> <pre><code>@staticmethod\ndef get_input_count(input_func: Any) -&gt; int:\n\"\"\"get_input_count.\"\"\"\n    return Base.get_input_count(input_func)\n</code></pre>"},{"location":"reference/general/olympiad/#pytry.general.olympiad.Olympiad.main","title":"<code>main()</code>","text":"<p>Not Implemented.</p> Source code in <code>pytry/general/olympiad.py</code> <pre><code>def main(self) -&gt; None:\n\"\"\"Not Implemented.\"\"\"\n</code></pre>"},{"location":"reference/general/olympiad/#pytry.general.olympiad.Olympiad.update_stats","title":"<code>update_stats(key_stats, key)</code>","text":"<p>Not Implemented.</p> Source code in <code>pytry/general/olympiad.py</code> <pre><code>def update_stats(self, key_stats, key):\n\"\"\"Not Implemented.\"\"\"\n</code></pre>"},{"location":"reference/general/world_cup_base/","title":"World cup base","text":"<p>World Cup score board base.</p> <p>Iran, Portugal, Spain and Morocco are present in Group B of the World Cup.</p> <pre><code>Write a program that:\n\nupon receiving the results of the games,\nwill print the team name, the number of wins and losses,\nand the difference in goals and points respectively in one line.\nEach team should be printed in order of points in one line.\n(If the points are equal, the number of wins will be considered.\nIf both the number of wins and the points are equal,\nthey will be printed in alphabetical order.)\n\nNote: The team gets zero points in case of loss,\none point in case of draw and three points in case of win.\nGoal difference is the difference between goals scored and goals conceded by a team.\n\nRead the results of the games in the following order:\n(in the sample entry, the left number corresponds to the right team.)\n\nInput:\nIran - Spain\nIran - Portugal\nIran - Morocco\nSpain - Portugal\nSpain - Morocco\nPortugal - Morocco\n2-2\n2-1\n1-2\n2-2\n3-1\n2-1\n\nOutput:\nSpain  wins:1 , loses:0 , draws:2 , goal difference:2 , points:5\nIran  wins:1 , loses:1 , draws:1 , goal difference:0 , points:4\nPortugal  wins:1 , loses:1 , draws:1 , goal difference:0 , points:4\nMorocco  wins:1 , loses:2 , draws:0 , goal difference:-2 , points:3\n</code></pre>"},{"location":"reference/general/world_cup_base/#pytry.general.world_cup_base.BaseScoreBoard","title":"<code>BaseScoreBoard</code>","text":"<p>         Bases: <code>Base</code></p> <p>BaseScoreBoard.</p> <p>Attributes:</p> Name Type Description <code>input_count</code> <code>int</code> <p>number of games.</p> <code>games</code> <code>List[Dict[str, str]]</code> <p>List of games. like [{\"A\": \"1\", \"B\": \"1\"}, {\"A\": \"1\", \"C\": \"3\"}].</p> <code>keys</code> <code>Set[str]</code> <p>Set of countries. like {\"A\", \"B\", \"C\"}.</p> <code>key_stats</code> <code>Any</code> <p>data structure for saving wins, loses, draws, goal_difference, points, count for each country.</p> Source code in <code>pytry/general/world_cup_base.py</code> <pre><code>class BaseScoreBoard(Base):\n\"\"\"BaseScoreBoard.\n\n    Attributes:\n        input_count: number of games.\n        games: List of games. like [{\"A\": \"1\", \"B\": \"1\"}, {\"A\": \"1\", \"C\": \"3\"}].\n        keys: Set of countries. like {\"A\", \"B\", \"C\"}.\n        key_stats: data structure for saving wins, loses, draws, goal_difference, points, count for each country.\n    \"\"\"\n\n    @abstractmethod\n    def __init__(self, input_func: Any, default_count: Optional[int] = None) -&gt; None:\n\"\"\"Given input_func; Inits games, BaseScoreBoard attributes.\n\n        Args:\n            input_func: A function for generating input data.\n            default_count: default number of keys if input_count is not specified.\n        \"\"\"\n        super().__init__(input_func, default_count)\n        self.input_count: int\n        games = []\n        countries = set()\n        country_pairs = self._get_country_pairs(input_func, self.input_count)\n        scores = self._get_key_data(input_func, self.input_count)\n\n        for i in range(0, self.input_count):\n            games.append({country_pairs[i][0]: scores[i][0], country_pairs[i][1]: scores[i][1]})\n            countries.add(country_pairs[i][0])\n            countries.add(country_pairs[i][1])\n\n        self.games: List[Dict[str, str]] = games\n        self.keys: Set[str] = countries\n        self.key_stats: Any\n\n    @staticmethod\n    def _get_country_pairs(input_func: Any, input_count: int) -&gt; List[List[str]]:\n        country_pairs = []\n        while True:\n            raw_country_pair: str = input_func()\n            if re.match(r\"\\w+\\s-\\s\\w+\", raw_country_pair):\n                country_pair = raw_country_pair.split(\" - \")\n                country_pairs.append(country_pair)\n            if len(country_pairs) == input_count:\n                break\n        return country_pairs\n\n    @staticmethod\n    def _get_key_data(input_func: Any, input_count: int):\n        scores = []\n        while True:\n            raw_scores: str = input_func()\n            if re.match(r\"\\d+-\\d+\", raw_scores):\n                scores.append(raw_scores.split(\"-\"))\n            if len(scores) == input_count:\n                break\n        return scores\n\n    @staticmethod\n    @abstractmethod\n    def get_row(key_stats, key: str):  # pragma: no cover\n\"\"\"Get row.\"\"\"\n        return {}\n\n    @staticmethod\n    def get_other_side(game: Dict[str, str], country: str) -&gt; str:\n\"\"\"Get other side in a game.\n\n        Args:\n            game: a dictionary like {\"A\": \"1\", \"B\": \"1\"}.\n            country: the country which the scores are calculated for like \"A\".\n\n        Returns:\n            the the other country like \"B\"\n        \"\"\"\n        game_sides: List = list(game.keys())\n        game_sides.remove(country)\n        other_side = game_sides[0]\n        return other_side\n\n    @staticmethod\n    def _update_game_stats(row, goal_difference):\n        if goal_difference == 0:\n            row[\"draws\"] += 1\n            row[\"points\"] += 1\n        elif goal_difference &gt; 0:\n            row[\"wins\"] += 1\n            row[\"points\"] += 3\n        elif goal_difference &lt; 0:\n            row[\"loses\"] += 1\n        return row\n\n    def update_game(self, row: Dict, key: str, game: Dict, other_side: str) -&gt; Dict:\n\"\"\"Update stats of a country for a single game.\n\n        Args:\n            row: data structure for each country.\n            game: a dictionary like {\"A\": \"1\", \"B\": \"1\"}.\n            key: the country which the scores are calculated for like \"A\".\n            other_side: the other country like \"B\".\n\n        Returns:\n            updated stats for the country row\n        \"\"\"\n        if game and other_side:\n            goal_difference = int(game[key]) - int(game[other_side])\n            row[\"goal_difference\"] += goal_difference\n            row = self._update_game_stats(row, goal_difference)\n\n        return row\n\n    def update_stats(self, key_stats: Any, key: str, game=None, other_side: str = \"\") -&gt; Any:\n\"\"\"Update key_stats for a single game.\n\n        Args:\n            key_stats: score board data structure for each country.\n            game: a dictionary like {\"A\": \"1\", \"B\": \"1\"}.\n            key: the country which the scores are calculated for like \"A\".\n            other_side: the other country like \"B\".\n\n        Returns:\n            updated scores for each country\n        \"\"\"\n        row = self.get_row(key_stats, key)\n        row[\"count\"] += 1\n        row = self.update_game(row, key, game, other_side)\n\n        return key_stats\n\n    @staticmethod\n    def fill_score_board(score_board_result, country, row):\n\"\"\"Fill score board data row by row.\"\"\"\n        score_board_result += (\n            f\"{country}  \"\n            f\"wins:{row['wins']} , \"\n            f\"loses:{row['loses']} , \"\n            f\"draws:{row['draws']} , \"\n            f\"goal difference:{row['goal_difference']} , \"\n            f\"points:{row['points']}\\n\"\n        )\n        return score_board_result\n\n    def main(self) -&gt; None:\n\"\"\"Given data from the input; calculates score board.\"\"\"\n        score_board, games, countries = self.key_stats, self.games, self.keys\n        for country in countries:\n            for game in games:\n                if country in game:\n                    other_side = self.get_other_side(game, country)\n                    score_board = self.update_stats(score_board, country, game, other_side)\n        self.key_stats = score_board\n</code></pre>"},{"location":"reference/general/world_cup_base/#pytry.general.world_cup_base.BaseScoreBoard.__init__","title":"<code>__init__(input_func, default_count=None)</code>  <code>abstractmethod</code>","text":"<p>Given input_func; Inits games, BaseScoreBoard attributes.</p> <p>Parameters:</p> Name Type Description Default <code>input_func</code> <code>Any</code> <p>A function for generating input data.</p> required <code>default_count</code> <code>Optional[int]</code> <p>default number of keys if input_count is not specified.</p> <code>None</code> Source code in <code>pytry/general/world_cup_base.py</code> <pre><code>@abstractmethod\ndef __init__(self, input_func: Any, default_count: Optional[int] = None) -&gt; None:\n\"\"\"Given input_func; Inits games, BaseScoreBoard attributes.\n\n    Args:\n        input_func: A function for generating input data.\n        default_count: default number of keys if input_count is not specified.\n    \"\"\"\n    super().__init__(input_func, default_count)\n    self.input_count: int\n    games = []\n    countries = set()\n    country_pairs = self._get_country_pairs(input_func, self.input_count)\n    scores = self._get_key_data(input_func, self.input_count)\n\n    for i in range(0, self.input_count):\n        games.append({country_pairs[i][0]: scores[i][0], country_pairs[i][1]: scores[i][1]})\n        countries.add(country_pairs[i][0])\n        countries.add(country_pairs[i][1])\n\n    self.games: List[Dict[str, str]] = games\n    self.keys: Set[str] = countries\n    self.key_stats: Any\n</code></pre>"},{"location":"reference/general/world_cup_base/#pytry.general.world_cup_base.BaseScoreBoard.fill_score_board","title":"<code>fill_score_board(score_board_result, country, row)</code>  <code>staticmethod</code>","text":"<p>Fill score board data row by row.</p> Source code in <code>pytry/general/world_cup_base.py</code> <pre><code>@staticmethod\ndef fill_score_board(score_board_result, country, row):\n\"\"\"Fill score board data row by row.\"\"\"\n    score_board_result += (\n        f\"{country}  \"\n        f\"wins:{row['wins']} , \"\n        f\"loses:{row['loses']} , \"\n        f\"draws:{row['draws']} , \"\n        f\"goal difference:{row['goal_difference']} , \"\n        f\"points:{row['points']}\\n\"\n    )\n    return score_board_result\n</code></pre>"},{"location":"reference/general/world_cup_base/#pytry.general.world_cup_base.BaseScoreBoard.get_other_side","title":"<code>get_other_side(game, country)</code>  <code>staticmethod</code>","text":"<p>Get other side in a game.</p> <p>Parameters:</p> Name Type Description Default <code>game</code> <code>Dict[str, str]</code> <p>a dictionary like {\"A\": \"1\", \"B\": \"1\"}.</p> required <code>country</code> <code>str</code> <p>the country which the scores are calculated for like \"A\".</p> required <p>Returns:</p> Type Description <code>str</code> <p>the the other country like \"B\"</p> Source code in <code>pytry/general/world_cup_base.py</code> <pre><code>@staticmethod\ndef get_other_side(game: Dict[str, str], country: str) -&gt; str:\n\"\"\"Get other side in a game.\n\n    Args:\n        game: a dictionary like {\"A\": \"1\", \"B\": \"1\"}.\n        country: the country which the scores are calculated for like \"A\".\n\n    Returns:\n        the the other country like \"B\"\n    \"\"\"\n    game_sides: List = list(game.keys())\n    game_sides.remove(country)\n    other_side = game_sides[0]\n    return other_side\n</code></pre>"},{"location":"reference/general/world_cup_base/#pytry.general.world_cup_base.BaseScoreBoard.get_row","title":"<code>get_row(key_stats, key)</code>  <code>staticmethod</code> <code>abstractmethod</code>","text":"<p>Get row.</p> Source code in <code>pytry/general/world_cup_base.py</code> <pre><code>@staticmethod\n@abstractmethod\ndef get_row(key_stats, key: str):  # pragma: no cover\n\"\"\"Get row.\"\"\"\n    return {}\n</code></pre>"},{"location":"reference/general/world_cup_base/#pytry.general.world_cup_base.BaseScoreBoard.main","title":"<code>main()</code>","text":"<p>Given data from the input; calculates score board.</p> Source code in <code>pytry/general/world_cup_base.py</code> <pre><code>def main(self) -&gt; None:\n\"\"\"Given data from the input; calculates score board.\"\"\"\n    score_board, games, countries = self.key_stats, self.games, self.keys\n    for country in countries:\n        for game in games:\n            if country in game:\n                other_side = self.get_other_side(game, country)\n                score_board = self.update_stats(score_board, country, game, other_side)\n    self.key_stats = score_board\n</code></pre>"},{"location":"reference/general/world_cup_base/#pytry.general.world_cup_base.BaseScoreBoard.update_game","title":"<code>update_game(row, key, game, other_side)</code>","text":"<p>Update stats of a country for a single game.</p> <p>Parameters:</p> Name Type Description Default <code>row</code> <code>Dict</code> <p>data structure for each country.</p> required <code>game</code> <code>Dict</code> <p>a dictionary like {\"A\": \"1\", \"B\": \"1\"}.</p> required <code>key</code> <code>str</code> <p>the country which the scores are calculated for like \"A\".</p> required <code>other_side</code> <code>str</code> <p>the other country like \"B\".</p> required <p>Returns:</p> Type Description <code>Dict</code> <p>updated stats for the country row</p> Source code in <code>pytry/general/world_cup_base.py</code> <pre><code>def update_game(self, row: Dict, key: str, game: Dict, other_side: str) -&gt; Dict:\n\"\"\"Update stats of a country for a single game.\n\n    Args:\n        row: data structure for each country.\n        game: a dictionary like {\"A\": \"1\", \"B\": \"1\"}.\n        key: the country which the scores are calculated for like \"A\".\n        other_side: the other country like \"B\".\n\n    Returns:\n        updated stats for the country row\n    \"\"\"\n    if game and other_side:\n        goal_difference = int(game[key]) - int(game[other_side])\n        row[\"goal_difference\"] += goal_difference\n        row = self._update_game_stats(row, goal_difference)\n\n    return row\n</code></pre>"},{"location":"reference/general/world_cup_base/#pytry.general.world_cup_base.BaseScoreBoard.update_stats","title":"<code>update_stats(key_stats, key, game=None, other_side='')</code>","text":"<p>Update key_stats for a single game.</p> <p>Parameters:</p> Name Type Description Default <code>key_stats</code> <code>Any</code> <p>score board data structure for each country.</p> required <code>game</code> <p>a dictionary like {\"A\": \"1\", \"B\": \"1\"}.</p> <code>None</code> <code>key</code> <code>str</code> <p>the country which the scores are calculated for like \"A\".</p> required <code>other_side</code> <code>str</code> <p>the other country like \"B\".</p> <code>''</code> <p>Returns:</p> Type Description <code>Any</code> <p>updated scores for each country</p> Source code in <code>pytry/general/world_cup_base.py</code> <pre><code>def update_stats(self, key_stats: Any, key: str, game=None, other_side: str = \"\") -&gt; Any:\n\"\"\"Update key_stats for a single game.\n\n    Args:\n        key_stats: score board data structure for each country.\n        game: a dictionary like {\"A\": \"1\", \"B\": \"1\"}.\n        key: the country which the scores are calculated for like \"A\".\n        other_side: the other country like \"B\".\n\n    Returns:\n        updated scores for each country\n    \"\"\"\n    row = self.get_row(key_stats, key)\n    row[\"count\"] += 1\n    row = self.update_game(row, key, game, other_side)\n\n    return key_stats\n</code></pre>"},{"location":"reference/general/world_cup_dataframe/","title":"World cup dataframe","text":"<p>World Cup score board dataframe.</p>"},{"location":"reference/general/world_cup_dataframe/#pytry.general.world_cup_dataframe.DFScoreBoard","title":"<code>DFScoreBoard</code>","text":"<p>         Bases: <code>BaseScoreBoard</code></p> <p>DFScoreBoard.</p> <p>Attributes:</p> Name Type Description <code>input_count</code> <code>int</code> <p>number of games.</p> <code>games</code> <code>List[Dict[str, str]]</code> <p>List of games. like [{\"A\": \"1\", \"B\": \"1\"}, {\"A\": 1, \"C\": \"3\"}].</p> <code>keys</code> <code>Set[str]</code> <p>Set of countries. like {\"A\", \"B\", \"C\"}.</p> <code>key_stats</code> <code>pd.DataFrame</code> <p>data structure for saving wins, loses, draws, goal_difference, points, count for each country.</p> Source code in <code>pytry/general/world_cup_dataframe.py</code> <pre><code>class DFScoreBoard(BaseScoreBoard):\n\"\"\"DFScoreBoard.\n\n    Attributes:\n        input_count: number of games.\n        games: List of games. like [{\"A\": \"1\", \"B\": \"1\"}, {\"A\": 1, \"C\": \"3\"}].\n        keys: Set of countries. like {\"A\", \"B\", \"C\"}.\n        key_stats: data structure for saving wins, loses, draws, goal_difference, points, count for each country.\n    \"\"\"\n\n    def __init__(self, input_func: Any, default_count: Optional[int] = None) -&gt; None:\n\"\"\"Given input_func; Inits key_stats.\n\n        Args:\n            input_func: A function for generating input data.\n            default_count: default number of keys if input_count is not specified.\n        \"\"\"\n        super().__init__(input_func, default_count)\n        self.input_count: int\n        initial_data = []\n        index_labels = []\n        for country in self.keys:\n            index_labels.append(country)\n            initial_data.append([0, 0, 0, 0, 0, 0])\n        self.key_stats = pd.DataFrame(\n            initial_data, columns=[\"wins\", \"loses\", \"draws\", \"goal_difference\", \"points\", \"count\"], index=index_labels\n        )\n        self.games: List[Dict[str, str]]\n        self.keys: Set[str]\n        self.key_stats: pd.DataFrame\n\n    @staticmethod\n    def get_row(key_stats: pd.DataFrame, key: str):\n\"\"\"Get row.\"\"\"\n        return key_stats.loc[key]\n\n    def __repr__(self) -&gt; str:\n\"\"\"Given scores dataframe; create score board representation for all countries.\"\"\"\n        score_board_data: pd.DataFrame = self.key_stats\n        score_board_data = score_board_data.sort_index().sort_values(by=[\"points\"], ascending=False)\n        score_board_result = \"\"\n        for country, row in score_board_data.iterrows():\n            score_board_result = self.fill_score_board(score_board_result, country, row)\n\n        return score_board_result\n</code></pre>"},{"location":"reference/general/world_cup_dataframe/#pytry.general.world_cup_dataframe.DFScoreBoard.__init__","title":"<code>__init__(input_func, default_count=None)</code>","text":"<p>Given input_func; Inits key_stats.</p> <p>Parameters:</p> Name Type Description Default <code>input_func</code> <code>Any</code> <p>A function for generating input data.</p> required <code>default_count</code> <code>Optional[int]</code> <p>default number of keys if input_count is not specified.</p> <code>None</code> Source code in <code>pytry/general/world_cup_dataframe.py</code> <pre><code>def __init__(self, input_func: Any, default_count: Optional[int] = None) -&gt; None:\n\"\"\"Given input_func; Inits key_stats.\n\n    Args:\n        input_func: A function for generating input data.\n        default_count: default number of keys if input_count is not specified.\n    \"\"\"\n    super().__init__(input_func, default_count)\n    self.input_count: int\n    initial_data = []\n    index_labels = []\n    for country in self.keys:\n        index_labels.append(country)\n        initial_data.append([0, 0, 0, 0, 0, 0])\n    self.key_stats = pd.DataFrame(\n        initial_data, columns=[\"wins\", \"loses\", \"draws\", \"goal_difference\", \"points\", \"count\"], index=index_labels\n    )\n    self.games: List[Dict[str, str]]\n    self.keys: Set[str]\n    self.key_stats: pd.DataFrame\n</code></pre>"},{"location":"reference/general/world_cup_dataframe/#pytry.general.world_cup_dataframe.DFScoreBoard.__repr__","title":"<code>__repr__()</code>","text":"<p>Given scores dataframe; create score board representation for all countries.</p> Source code in <code>pytry/general/world_cup_dataframe.py</code> <pre><code>def __repr__(self) -&gt; str:\n\"\"\"Given scores dataframe; create score board representation for all countries.\"\"\"\n    score_board_data: pd.DataFrame = self.key_stats\n    score_board_data = score_board_data.sort_index().sort_values(by=[\"points\"], ascending=False)\n    score_board_result = \"\"\n    for country, row in score_board_data.iterrows():\n        score_board_result = self.fill_score_board(score_board_result, country, row)\n\n    return score_board_result\n</code></pre>"},{"location":"reference/general/world_cup_dataframe/#pytry.general.world_cup_dataframe.DFScoreBoard.get_row","title":"<code>get_row(key_stats, key)</code>  <code>staticmethod</code>","text":"<p>Get row.</p> Source code in <code>pytry/general/world_cup_dataframe.py</code> <pre><code>@staticmethod\ndef get_row(key_stats: pd.DataFrame, key: str):\n\"\"\"Get row.\"\"\"\n    return key_stats.loc[key]\n</code></pre>"},{"location":"reference/general/world_cup_dictionary/","title":"World cup dictionary","text":"<p>World Cup score board dictionary.</p>"},{"location":"reference/general/world_cup_dictionary/#pytry.general.world_cup_dictionary.DictScoreBoard","title":"<code>DictScoreBoard</code>","text":"<p>         Bases: <code>BaseScoreBoard</code></p> <p>DictScoreBoard.</p> <p>Attributes:</p> Name Type Description <code>input_count</code> <code>int</code> <p>number of games.</p> <code>games</code> <code>List[Dict[str, str]]</code> <p>List of games. like [{\"A\": \"1\", \"B\": \"1\"}, {\"A\": \"1\", \"C\": \"3\"}].</p> <code>keys</code> <code>Set[str]</code> <p>Set of countries. like {\"A\", \"B\", \"C\"}.</p> <code>key_stats</code> <code>Dict[str, Dict]</code> <p>data structure for saving wins, loses, draws, goal_difference, points, count for each country.</p> Source code in <code>pytry/general/world_cup_dictionary.py</code> <pre><code>class DictScoreBoard(BaseScoreBoard):\n\"\"\"DictScoreBoard.\n\n    Attributes:\n        input_count: number of games.\n        games: List of games. like [{\"A\": \"1\", \"B\": \"1\"}, {\"A\": \"1\", \"C\": \"3\"}].\n        keys: Set of countries. like {\"A\", \"B\", \"C\"}.\n        key_stats: data structure for saving wins, loses, draws, goal_difference, points, count for each country.\n    \"\"\"\n\n    def __init__(self, input_func: Any, default_count: Optional[int] = None) -&gt; None:\n\"\"\"Given input_func; Inits key_stats.\n\n        Args:\n            input_func: A function for generating input data.\n            default_count: default number of keys if input_count is not specified.\n        \"\"\"\n        super().__init__(input_func, default_count)\n        self.input_count: int\n        self.key_stats: Dict[str, Dict] = {}\n        for country in self.keys:\n            self.key_stats[country] = {\n                \"country\": country,\n                \"wins\": 0,\n                \"loses\": 0,\n                \"draws\": 0,\n                \"goal_difference\": 0,\n                \"points\": 0,\n                \"count\": 0,\n            }\n        self.games: List[Dict[str, str]]\n        self.keys: Set[str]\n\n    @staticmethod\n    def get_row(key_stats: Dict[str, Dict], key: str):\n\"\"\"Get row.\"\"\"\n        return key_stats[key]\n\n    def __repr__(self) -&gt; str:\n\"\"\"Given scores dictionary; create score board representation for all countries.\"\"\"\n        score_board_data: Dict = self.key_stats\n        soretd_countries = sorted(\n            score_board_data, key=lambda x: (-score_board_data[x][\"points\"], score_board_data[x][\"country\"])\n        )\n        score_board_result = \"\"\n        for country in soretd_countries:\n            row = score_board_data[country]\n            score_board_result = self.fill_score_board(score_board_result, country, row)\n\n        return score_board_result\n</code></pre>"},{"location":"reference/general/world_cup_dictionary/#pytry.general.world_cup_dictionary.DictScoreBoard.__init__","title":"<code>__init__(input_func, default_count=None)</code>","text":"<p>Given input_func; Inits key_stats.</p> <p>Parameters:</p> Name Type Description Default <code>input_func</code> <code>Any</code> <p>A function for generating input data.</p> required <code>default_count</code> <code>Optional[int]</code> <p>default number of keys if input_count is not specified.</p> <code>None</code> Source code in <code>pytry/general/world_cup_dictionary.py</code> <pre><code>def __init__(self, input_func: Any, default_count: Optional[int] = None) -&gt; None:\n\"\"\"Given input_func; Inits key_stats.\n\n    Args:\n        input_func: A function for generating input data.\n        default_count: default number of keys if input_count is not specified.\n    \"\"\"\n    super().__init__(input_func, default_count)\n    self.input_count: int\n    self.key_stats: Dict[str, Dict] = {}\n    for country in self.keys:\n        self.key_stats[country] = {\n            \"country\": country,\n            \"wins\": 0,\n            \"loses\": 0,\n            \"draws\": 0,\n            \"goal_difference\": 0,\n            \"points\": 0,\n            \"count\": 0,\n        }\n    self.games: List[Dict[str, str]]\n    self.keys: Set[str]\n</code></pre>"},{"location":"reference/general/world_cup_dictionary/#pytry.general.world_cup_dictionary.DictScoreBoard.__repr__","title":"<code>__repr__()</code>","text":"<p>Given scores dictionary; create score board representation for all countries.</p> Source code in <code>pytry/general/world_cup_dictionary.py</code> <pre><code>def __repr__(self) -&gt; str:\n\"\"\"Given scores dictionary; create score board representation for all countries.\"\"\"\n    score_board_data: Dict = self.key_stats\n    soretd_countries = sorted(\n        score_board_data, key=lambda x: (-score_board_data[x][\"points\"], score_board_data[x][\"country\"])\n    )\n    score_board_result = \"\"\n    for country in soretd_countries:\n        row = score_board_data[country]\n        score_board_result = self.fill_score_board(score_board_result, country, row)\n\n    return score_board_result\n</code></pre>"},{"location":"reference/general/world_cup_dictionary/#pytry.general.world_cup_dictionary.DictScoreBoard.get_row","title":"<code>get_row(key_stats, key)</code>  <code>staticmethod</code>","text":"<p>Get row.</p> Source code in <code>pytry/general/world_cup_dictionary.py</code> <pre><code>@staticmethod\ndef get_row(key_stats: Dict[str, Dict], key: str):\n\"\"\"Get row.\"\"\"\n    return key_stats[key]\n</code></pre>"}]}